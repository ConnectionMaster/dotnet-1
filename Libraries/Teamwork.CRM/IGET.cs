// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Teamwork.CRM
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// GET operations.
    /// </summary>
    public partial interface IGET
    {
        /// <summary>
        /// List all activities.
        /// </summary>
        /// <remarks>
        /// Returns a list of activities, they are returned with the most
        /// recently created
        /// first by default.
        ///
        /// The following values are allowed in the [include query
        /// parameter](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities):
        /// - activityType
        /// - assignees
        ///
        /// The following targets are allowed in [filter query
        /// parameters](https://crmdev-teamwork.docs.stoplight.io/documentation/general/filtering):
        /// - dealId
        /// - isComplete
        /// - typeId
        /// </remarks>
        /// <param name='orderMode'>
        /// Which direction to order the results in. Possible values include:
        /// 'asc', 'desc'
        /// </param>
        /// <param name='orderBy'>
        /// The sorting which the items are returned with, see the endpoints
        /// documentation
        /// for supported values and
        /// [sorting](https://crmdev-teamwork.docs.stoplight.io/documentation/general/sorting)
        /// for more detailed documentation of how this works.
        /// </param>
        /// <param name='include'>
        /// Comma separated list of relationships to include in the response.
        /// See
        /// [including related
        /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
        /// for more detailed documentation of how this works.
        /// </param>
        /// <param name='pageSize'>
        /// Max number of items per page
        /// See
        /// [pagination](https://crmdev-teamwork.docs.stoplight.io/documentation/general/pagination)
        /// for more detailed documentation of how this works.
        /// </param>
        /// <param name='pageOffset'>
        /// Offset items in the page by amount. For example with a pageSize of
        /// 20
        /// setting pageOffset to 20 will return the next page.
        /// See
        /// [pagination](https://crmdev-teamwork.docs.stoplight.io/documentation/general/pagination)
        /// for more detailed documentation of how this works.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<object>> ActivitiesAsync(string orderMode = default(string), string orderBy = default(string), string include = default(string), int? pageSize = 20, int? pageOffset = 0, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve an activity
        /// </summary>
        /// <remarks>
        /// The following values are allowed in the [include query
        /// parameter](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities):
        /// - activityType
        /// - assignees
        /// - contacts
        /// </remarks>
        /// <param name='id'>
        /// </param>
        /// <param name='include'>
        /// Comma separated list of relationships to include in the response.
        /// See
        /// [including related
        /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
        /// for more detailed documentation of how this works.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<object>> IdAsync(int id, string include = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List all activity types
        /// </summary>
        /// <remarks>
        /// Returns all activity types sorted by order index.
        ///
        /// The following targets are allowed in [filter query
        /// parameters](https://crmdev-teamwork.docs.stoplight.io/documentation/general/filtering):
        /// - isEnabled
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<object>> ActivityTypesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve an activity type
        /// </summary>
        /// <param name='id'>
        /// </param>
        /// <param name='include'>
        /// Comma separated list of relationships to include in the response.
        /// See
        /// [including related
        /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
        /// for more detailed documentation of how this works.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<object>> Idjson1WithHttpMessagesAsync(int id, string include = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List all companies
        /// </summary>
        /// <remarks>
        /// Returns all companies sorted by name.
        ///
        /// The following values are allowed in the [include query
        /// parameter](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities):
        /// - avatar
        /// - contacts
        /// - country
        /// - owner.avatar
        ///
        /// The following targets are allowed in [filter query
        /// parameters](https://crmdev-teamwork.docs.stoplight.io/documentation/general/filtering):
        /// - name
        /// </remarks>
        /// <param name='orderMode'>
        /// Which direction to order the results in. Possible values include:
        /// 'asc', 'desc'
        /// </param>
        /// <param name='orderBy'>
        /// The sorting which the items are returned with, see the endpoints
        /// documentation
        /// for supported values and
        /// [sorting](https://crmdev-teamwork.docs.stoplight.io/documentation/general/sorting)
        /// for more detailed documentation of how this works.
        /// </param>
        /// <param name='include'>
        /// Comma separated list of relationships to include in the response.
        /// See
        /// [including related
        /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
        /// for more detailed documentation of how this works.
        /// </param>
        /// <param name='pageSize'>
        /// Max number of items per page
        /// See
        /// [pagination](https://crmdev-teamwork.docs.stoplight.io/documentation/general/pagination)
        /// for more detailed documentation of how this works.
        /// </param>
        /// <param name='pageOffset'>
        /// Offset items in the page by amount. For example with a pageSize of
        /// 20
        /// setting pageOffset to 20 will return the next page.
        /// See
        /// [pagination](https://crmdev-teamwork.docs.stoplight.io/documentation/general/pagination)
        /// for more detailed documentation of how this works.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<object>> CompaniesAsync(string orderMode = default(string), string orderBy = default(string), string include = default(string), int? pageSize = 20, int? pageOffset = 0, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve a company
        /// </summary>
        /// <remarks>
        /// The following values are allowed in the [include query
        /// parameter](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities):
        /// - avatar
        /// - contacts.avatar
        /// - contacts.phoneNumbers.code
        /// - contacts
        /// - country
        /// - owner.avatar
        /// - phoneCodes
        /// - phoneNumbers.code
        /// - timezone
        /// </remarks>
        /// <param name='id'>
        /// </param>
        /// <param name='include'>
        /// Comma separated list of relationships to include in the response.
        /// See
        /// [including related
        /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
        /// for more detailed documentation of how this works.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<object>> Idjson2WithHttpMessagesAsync(int id, string include = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List all contacts
        /// </summary>
        /// <remarks>
        /// Returns a list of contacts, they are returned sorted by name by
        /// default.
        ///
        /// The following values are allowed in the [include query
        /// parameter](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities):
        /// - avatar
        /// - company.country
        /// - country
        /// - owner.avatar
        ///
        /// The following targets are allowed in [filter query
        /// parameters](https://crmdev-teamwork.docs.stoplight.io/documentation/general/filtering):
        /// - companyExists
        /// - companyId
        /// - dealId
        /// - id
        /// - name
        /// </remarks>
        /// <param name='orderMode'>
        /// Which direction to order the results in. Possible values include:
        /// 'asc', 'desc'
        /// </param>
        /// <param name='orderBy'>
        /// The sorting which the items are returned with, see the endpoints
        /// documentation
        /// for supported values and
        /// [sorting](https://crmdev-teamwork.docs.stoplight.io/documentation/general/sorting)
        /// for more detailed documentation of how this works.
        /// </param>
        /// <param name='include'>
        /// Comma separated list of relationships to include in the response.
        /// See
        /// [including related
        /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
        /// for more detailed documentation of how this works.
        /// </param>
        /// <param name='pageSize'>
        /// Max number of items per page
        /// See
        /// [pagination](https://crmdev-teamwork.docs.stoplight.io/documentation/general/pagination)
        /// for more detailed documentation of how this works.
        /// </param>
        /// <param name='pageOffset'>
        /// Offset items in the page by amount. For example with a pageSize of
        /// 20
        /// setting pageOffset to 20 will return the next page.
        /// See
        /// [pagination](https://crmdev-teamwork.docs.stoplight.io/documentation/general/pagination)
        /// for more detailed documentation of how this works.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<object>> ContactsAsync(string orderMode = default(string), string orderBy = default(string), string include = default(string), int? pageSize = 20, int? pageOffset = 0, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve a contact
        /// </summary>
        /// <remarks>
        /// The following values are allowed in the [include query
        /// parameter](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities):
        /// - avatar
        /// - company.avatar
        /// - company.country
        /// - company.phoneNumbers.code
        /// - company.timezone
        /// - country
        /// - owner.avatar
        /// - phoneCodes
        /// - phoneNumbers.code
        /// - timezone
        /// </remarks>
        /// <param name='id'>
        /// </param>
        /// <param name='include'>
        /// Comma separated list of relationships to include in the response.
        /// See
        /// [including related
        /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
        /// for more detailed documentation of how this works.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<object>> Idjson3WithHttpMessagesAsync(int id, string include = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List all countries
        /// </summary>
        /// <remarks>
        /// Returns all countries sorted by name.
        ///
        /// The following targets are allowed in [filter query
        /// parameters](https://crmdev-teamwork.docs.stoplight.io/documentation/general/filtering):
        /// - name
        /// - code
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<object>> CountriesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List all currencies
        /// </summary>
        /// <remarks>
        /// Returns a list of currencies, they are returned sorted by your
        /// installation's
        /// currency then code by default.
        ///
        /// The following targets are allowed in [filter query
        /// parameters](https://crmdev-teamwork.docs.stoplight.io/documentation/general/filtering):
        /// - code
        /// - name
        /// </remarks>
        /// <param name='orderMode'>
        /// Which direction to order the results in. Possible values include:
        /// 'asc', 'desc'
        /// </param>
        /// <param name='orderBy'>
        /// The sorting which the items are returned with, see the endpoints
        /// documentation
        /// for supported values and
        /// [sorting](https://crmdev-teamwork.docs.stoplight.io/documentation/general/sorting)
        /// for more detailed documentation of how this works.
        /// </param>
        /// <param name='include'>
        /// Comma separated list of relationships to include in the response.
        /// See
        /// [including related
        /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
        /// for more detailed documentation of how this works.
        /// </param>
        /// <param name='pageSize'>
        /// Max number of items per page
        /// See
        /// [pagination](https://crmdev-teamwork.docs.stoplight.io/documentation/general/pagination)
        /// for more detailed documentation of how this works.
        /// </param>
        /// <param name='pageOffset'>
        /// Offset items in the page by amount. For example with a pageSize of
        /// 20
        /// setting pageOffset to 20 will return the next page.
        /// See
        /// [pagination](https://crmdev-teamwork.docs.stoplight.io/documentation/general/pagination)
        /// for more detailed documentation of how this works.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<object>> CurrenciesAsync(string orderMode = default(string), string orderBy = default(string), string include = default(string), int? pageSize = 20, int? pageOffset = 0, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve a currency
        /// </summary>
        /// <param name='id'>
        /// </param>
        /// <param name='include'>
        /// Comma separated list of relationships to include in the response.
        /// See
        /// [including related
        /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
        /// for more detailed documentation of how this works.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<object>> Idjson4WithHttpMessagesAsync(int id, string include = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List all custom fields
        /// </summary>
        /// <remarks>
        /// Returns a list with all custom fields.
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<object>> CustomFieldsAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve a custom field
        /// </summary>
        /// <param name='id'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<object>> Idjson5WithHttpMessagesAsync(int id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get all customfilters
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<object>> CustomFiltersAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get customFilter for an id
        /// </summary>
        /// <param name='id'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<object>> Idjson6WithHttpMessagesAsync(int id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List all deals
        /// </summary>
        /// <remarks>
        /// Returns a list of deals, they are returned with the most recently
        /// created
        /// first by default.
        ///
        /// Make sure you first read how to work with [leads, opportunities,
        /// and
        /// deals.](https://crmdev-teamwork.docs.stoplight.io/documentation/miscellaneous/leads-opportunities)
        ///
        /// The following values are allowed in the [include query
        /// parameter](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities):
        /// - company
        /// - company.phoneNumbers.code
        /// - currency
        /// - mainContact
        /// - owner.avatar
        /// - stage.pipeline
        ///
        /// The following targets are allowed in [filter query
        /// parameters](https://crmdev-teamwork.docs.stoplight.io/documentation/general/filtering):
        /// - companyId
        /// - contactEmail
        /// - contactId
        /// - isQualified
        /// - ownerId
        /// - state
        /// - title
        /// </remarks>
        /// <param name='orderMode'>
        /// Which direction to order the results in. Possible values include:
        /// 'asc', 'desc'
        /// </param>
        /// <param name='orderBy'>
        /// The sorting which the items are returned with, see the endpoints
        /// documentation
        /// for supported values and
        /// [sorting](https://crmdev-teamwork.docs.stoplight.io/documentation/general/sorting)
        /// for more detailed documentation of how this works.
        /// </param>
        /// <param name='include'>
        /// Comma separated list of relationships to include in the response.
        /// See
        /// [including related
        /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
        /// for more detailed documentation of how this works.
        /// </param>
        /// <param name='pageSize'>
        /// Max number of items per page
        /// See
        /// [pagination](https://crmdev-teamwork.docs.stoplight.io/documentation/general/pagination)
        /// for more detailed documentation of how this works.
        /// </param>
        /// <param name='pageOffset'>
        /// Offset items in the page by amount. For example with a pageSize of
        /// 20
        /// setting pageOffset to 20 will return the next page.
        /// See
        /// [pagination](https://crmdev-teamwork.docs.stoplight.io/documentation/general/pagination)
        /// for more detailed documentation of how this works.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<object>> DealsAsync(string orderMode = default(string), string orderBy = default(string), string include = default(string), int? pageSize = 20, int? pageOffset = 0, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve a deal
        /// </summary>
        /// <remarks>
        /// Make sure you first read how to work with [leads, opportunities,
        /// and
        /// deals.](https://crmdev-teamwork.docs.stoplight.io/documentation/miscellaneous/leads-opportunities)
        ///
        /// The following values are allowed in the [include query
        /// parameter](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities):
        /// - company.avatar
        /// - company.phoneNumbers.code
        /// - company.timezone
        /// - contacts.avatar
        /// - contacts.company
        /// - contacts.phoneNumbers.code
        /// - contacts.timezone
        /// - currency
        /// - lostReason
        /// - mainContact.avatar
        /// - mainContact.timezone
        /// - owner.avatar
        /// - products
        /// - stage.pipeline
        /// </remarks>
        /// <param name='id'>
        /// </param>
        /// <param name='include'>
        /// Comma separated list of relationships to include in the response.
        /// See
        /// [including related
        /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
        /// for more detailed documentation of how this works.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<object>> Idjson7WithHttpMessagesAsync(int id, string include = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get all exports
        /// </summary>
        /// <remarks>
        /// Returns all exports sorted by createdAt descending.
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<object>> ExportsAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Download a file
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<object>> DownloadWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Redirect to file
        /// </summary>
        /// <remarks>
        /// Returns a temporary redirect (307) to a public URL to the file.
        /// If the file isn't an avatar, it will be accessible only for a
        /// period of time.
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<object>> RedirectWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get the health status of the app
        /// </summary>
        /// <remarks>
        /// We will check the health of any required services
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<HealthjsonOKResponse>> HealthAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List all imports
        /// </summary>
        /// <remarks>
        /// Returns a list of imports, they are returned with the most recently
        /// created
        /// first.
        ///
        /// The following values are allowed in the [include query
        /// parameter](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities):
        /// - creator
        /// </remarks>
        /// <param name='orderMode'>
        /// Which direction to order the results in. Possible values include:
        /// 'asc', 'desc'
        /// </param>
        /// <param name='orderBy'>
        /// The sorting which the items are returned with, see the endpoints
        /// documentation
        /// for supported values and
        /// [sorting](https://crmdev-teamwork.docs.stoplight.io/documentation/general/sorting)
        /// for more detailed documentation of how this works.
        /// </param>
        /// <param name='include'>
        /// Comma separated list of relationships to include in the response.
        /// See
        /// [including related
        /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
        /// for more detailed documentation of how this works.
        /// </param>
        /// <param name='pageSize'>
        /// Max number of items per page
        /// See
        /// [pagination](https://crmdev-teamwork.docs.stoplight.io/documentation/general/pagination)
        /// for more detailed documentation of how this works.
        /// </param>
        /// <param name='pageOffset'>
        /// Offset items in the page by amount. For example with a pageSize of
        /// 20
        /// setting pageOffset to 20 will return the next page.
        /// See
        /// [pagination](https://crmdev-teamwork.docs.stoplight.io/documentation/general/pagination)
        /// for more detailed documentation of how this works.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<object>> ImportsAsync(string orderMode = default(string), string orderBy = default(string), string include = default(string), int? pageSize = 20, int? pageOffset = 0, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get all lost-reasons
        /// </summary>
        /// <remarks>
        /// Returns all lost-reasons sorted
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<object>> LostReasonsAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get lostReason for an id
        /// </summary>
        /// <param name='id'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<object>> Idjson8WithHttpMessagesAsync(int id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List all notes
        /// </summary>
        /// <remarks>
        /// Lists all the notes, they are returned with the oldest first by
        /// default.
        ///
        /// The following targets are allowed in [filter query
        /// parameters](https://crmdev-teamwork.docs.stoplight.io/documentation/general/filtering):
        /// - subjectId
        /// - subjectType
        /// </remarks>
        /// <param name='orderMode'>
        /// Which direction to order the results in. Possible values include:
        /// 'asc', 'desc'
        /// </param>
        /// <param name='orderBy'>
        /// The sorting which the items are returned with, see the endpoints
        /// documentation
        /// for supported values and
        /// [sorting](https://crmdev-teamwork.docs.stoplight.io/documentation/general/sorting)
        /// for more detailed documentation of how this works.
        /// </param>
        /// <param name='include'>
        /// Comma separated list of relationships to include in the response.
        /// See
        /// [including related
        /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
        /// for more detailed documentation of how this works.
        /// </param>
        /// <param name='pageSize'>
        /// Max number of items per page
        /// See
        /// [pagination](https://crmdev-teamwork.docs.stoplight.io/documentation/general/pagination)
        /// for more detailed documentation of how this works.
        /// </param>
        /// <param name='pageOffset'>
        /// Offset items in the page by amount. For example with a pageSize of
        /// 20
        /// setting pageOffset to 20 will return the next page.
        /// See
        /// [pagination](https://crmdev-teamwork.docs.stoplight.io/documentation/general/pagination)
        /// for more detailed documentation of how this works.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<object>> NotesAsync(string orderMode = default(string), string orderBy = default(string), string include = default(string), int? pageSize = 20, int? pageOffset = 0, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve a note
        /// </summary>
        /// <remarks>
        /// The following values are allowed in the [include query
        /// parameter](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities):
        /// - createdBy
        /// </remarks>
        /// <param name='id'>
        /// </param>
        /// <param name='include'>
        /// Comma separated list of relationships to include in the response.
        /// See
        /// [including related
        /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
        /// for more detailed documentation of how this works.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<object>> Idjson9WithHttpMessagesAsync(int id, string include = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List all phone codes
        /// </summary>
        /// <remarks>
        /// Returns all phone codes sorted by name.
        ///
        /// The following targets are allowed in [filter query
        /// parameters](https://crmdev-teamwork.docs.stoplight.io/documentation/general/filtering):
        /// - code
        /// - name
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<object>> PhoneCodesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List all pipelines
        /// </summary>
        /// <remarks>
        /// Returns a list of pipelines sorted by orderIndex.
        ///
        /// The following values are allowed in the [include query
        /// parameter](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities):
        /// - stages
        ///
        /// The following targets are allowed in [filter query
        /// parameters](https://crmdev-teamwork.docs.stoplight.io/documentation/general/filtering):
        /// - isQualified
        /// - name
        /// </remarks>
        /// <param name='orderMode'>
        /// Which direction to order the results in. Possible values include:
        /// 'asc', 'desc'
        /// </param>
        /// <param name='orderBy'>
        /// The sorting which the items are returned with, see the endpoints
        /// documentation
        /// for supported values and
        /// [sorting](https://crmdev-teamwork.docs.stoplight.io/documentation/general/sorting)
        /// for more detailed documentation of how this works.
        /// </param>
        /// <param name='include'>
        /// Comma separated list of relationships to include in the response.
        /// See
        /// [including related
        /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
        /// for more detailed documentation of how this works.
        /// </param>
        /// <param name='pageSize'>
        /// Max number of items per page
        /// See
        /// [pagination](https://crmdev-teamwork.docs.stoplight.io/documentation/general/pagination)
        /// for more detailed documentation of how this works.
        /// </param>
        /// <param name='pageOffset'>
        /// Offset items in the page by amount. For example with a pageSize of
        /// 20
        /// setting pageOffset to 20 will return the next page.
        /// See
        /// [pagination](https://crmdev-teamwork.docs.stoplight.io/documentation/general/pagination)
        /// for more detailed documentation of how this works.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<object>> PipelinesAsync(string orderMode = default(string), string orderBy = default(string), string include = default(string), int? pageSize = 20, int? pageOffset = 0, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve a pipeline
        /// </summary>
        /// <remarks>
        /// The following values are allowed in the [include query
        /// parameter](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities):
        /// - stages
        /// </remarks>
        /// <param name='id'>
        /// </param>
        /// <param name='include'>
        /// Comma separated list of relationships to include in the response.
        /// See
        /// [including related
        /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
        /// for more detailed documentation of how this works.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<object>> Idjson10WithHttpMessagesAsync(int id, string include = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List all products
        /// </summary>
        /// <remarks>
        /// Returns a list of products in alphabetical order of their names.
        ///
        /// The following values are allowed in the [include query
        /// parameter](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities):
        /// - owner
        /// - prices
        /// - avatar
        ///
        /// The following targets are allowed in [filter query
        /// parameters](https://crmdev-teamwork.docs.stoplight.io/documentation/general/filtering):
        /// - id
        /// - name
        /// - state
        /// </remarks>
        /// <param name='orderMode'>
        /// Which direction to order the results in. Possible values include:
        /// 'asc', 'desc'
        /// </param>
        /// <param name='orderBy'>
        /// The sorting which the items are returned with, see the endpoints
        /// documentation
        /// for supported values and
        /// [sorting](https://crmdev-teamwork.docs.stoplight.io/documentation/general/sorting)
        /// for more detailed documentation of how this works.
        /// </param>
        /// <param name='include'>
        /// Comma separated list of relationships to include in the response.
        /// See
        /// [including related
        /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
        /// for more detailed documentation of how this works.
        /// </param>
        /// <param name='pageSize'>
        /// Max number of items per page
        /// See
        /// [pagination](https://crmdev-teamwork.docs.stoplight.io/documentation/general/pagination)
        /// for more detailed documentation of how this works.
        /// </param>
        /// <param name='pageOffset'>
        /// Offset items in the page by amount. For example with a pageSize of
        /// 20
        /// setting pageOffset to 20 will return the next page.
        /// See
        /// [pagination](https://crmdev-teamwork.docs.stoplight.io/documentation/general/pagination)
        /// for more detailed documentation of how this works.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<object>> ProductsAsync(string orderMode = default(string), string orderBy = default(string), string include = default(string), int? pageSize = 20, int? pageOffset = 0, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve a product
        /// </summary>
        /// <remarks>
        /// The following values are allowed in the [include query
        /// parameter](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities):
        /// - owner
        /// - prices
        /// - avatar
        /// </remarks>
        /// <param name='id'>
        /// </param>
        /// <param name='include'>
        /// Comma separated list of relationships to include in the response.
        /// See
        /// [including related
        /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
        /// for more detailed documentation of how this works.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<object>> Idjson11WithHttpMessagesAsync(int id, string include = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get activities completed report
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<object>> ActivitiesCompletedAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Export activities completed report in Office Open XML (xlsx)
        /// format.
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<XlsxNotFoundResponse>> XlsxWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get activities completed over time report
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<object>> OverTimeAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get activities created report
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<object>> ActivitiesCreatedAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Export activities created report in Office Open XML (xlsx) format.
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<XlsxNotFoundResponse>> Xlsx1WithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get activities created over time report
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<object>> OverTimejson1WithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get deals created report
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<object>> DealsCreatedAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Export deals created report in Office Open XML (xlsx) format.
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<XlsxNotFoundResponse>> Xlsx2WithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get deals created report
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<object>> OverTimejson2WithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get deals lost report
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<object>> DealsLostAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Export deals lost report in Office Open XML (xlsx) format.
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<XlsxNotFoundResponse>> Xlsx3WithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get leads qualified report
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<object>> LeadsQualifiedAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Export leads qualified report in Office Open XML (xlsx) format.
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<XlsxNotFoundResponse>> Xlsx4WithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get leads qualified report
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<object>> OverTimejson3WithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get opportunities won report
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<object>> OpportunitiesWonAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Export opportunities won report in Office Open XML (xlsx) format.
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<XlsxNotFoundResponse>> Xlsx5WithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get opportunities won overtime report
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<object>> OverTimejson4WithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get deals lost report
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<object>> OverTimejson5WithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Search text in entities
        /// </summary>
        /// <remarks>
        /// Search for a given text in the entities, matching entities are
        /// returned by the most relevant first.
        ///
        /// The following values are allowed in the [include query
        /// parameter](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities):
        /// - company.avatar
        /// - company.phoneNumbers.code
        /// - company.timezone
        /// - contacts.avatar
        /// - contacts.company
        /// - contacts.phoneNumbers.code
        /// - contacts.timezone
        /// - currency
        /// - lostReason
        /// - mainContact.avatar
        /// - mainContact.timezone
        /// - owner.avatar
        /// - products
        /// - stage.pipeline
        ///
        /// The following targets are allowed in [filter query
        /// parameters](https://crmdev-teamwork.docs.stoplight.io/documentation/general/filtering):
        /// - isQualified
        /// - kind
        /// - pipelineId
        ///
        /// In the response, `title` is a string that represents the `content`
        /// entity, as follows:
        ///
        /// | "content" type | Property / properties |
        /// |----------------|-----------------------|
        /// | activities     | title                 |
        /// | companies      | name                  |
        /// | contacts       | firstName + lastName  |
        /// | deals          | title                 |
        /// | files          | name                  |
        /// | notes          | description           |
        /// | pipelines      | name                  |
        /// | products       | name                  |
        /// | users          | firstName + lastName  |
        ///
        /// If the `title` is longer than 255 characters, it’s truncated to 251
        /// characters and “...” is appended.
        /// </remarks>
        /// <param name='t'>
        /// The search term.
        /// </param>
        /// <param name='include'>
        /// Comma separated list of relationships to include in the response.
        /// See
        /// [including related
        /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
        /// for more detailed documentation of how this works.
        /// </param>
        /// <param name='pageSize'>
        /// Max number of items per page
        /// See
        /// [pagination](https://crmdev-teamwork.docs.stoplight.io/documentation/general/pagination)
        /// for more detailed documentation of how this works.
        /// </param>
        /// <param name='pageOffset'>
        /// Offset items in the page by amount. For example with a pageSize of
        /// 20
        /// setting pageOffset to 20 will return the next page.
        /// See
        /// [pagination](https://crmdev-teamwork.docs.stoplight.io/documentation/general/pagination)
        /// for more detailed documentation of how this works.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<object>> SearchAsync(string t = default(string), string include = default(string), int? pageSize = 20, int? pageOffset = 0, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get the current user session, connections, features etc
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<object>> MeAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List all stages
        /// </summary>
        /// <remarks>
        /// Returns all stages sorted, they are returned with the lowest
        /// `orderIndex` first.
        ///
        /// The following values are allowed in the [include query
        /// parameter](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities):
        /// - pipeline
        /// - deals
        ///
        /// The following targets are allowed in [filter query
        /// parameters](https://crmdev-teamwork.docs.stoplight.io/documentation/general/filtering):
        /// - name
        /// - pipelineId
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<object>> StagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Retrieve a stage
        /// </summary>
        /// <remarks>
        /// The following values are allowed in the [include query
        /// parameter](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities):
        /// - pipeline
        /// - deals
        /// </remarks>
        /// <param name='id'>
        /// </param>
        /// <param name='include'>
        /// Comma separated list of relationships to include in the response.
        /// See
        /// [including related
        /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
        /// for more detailed documentation of how this works.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<object>> Idjson12WithHttpMessagesAsync(int id, string include = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get the subscription URLs
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<SubscriptionUrlsjsonOKResponse>> SubscriptionUrlsAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get all timezones
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<TimezonesjsonNotFoundResponse>> TimezonesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get all users
        /// </summary>
        /// <remarks>
        /// Returns all users sorted from highest deal to lowest deal
        /// </remarks>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<object>> UsersAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get current user
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<object>> Mejson1WithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get user for an id
        /// </summary>
        /// <param name='id'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<object>> Idjson13WithHttpMessagesAsync(int id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List all files
        /// </summary>
        /// <remarks>
        /// Returns all files sorted by createdAt.
        ///
        /// The following values are allowed in the [include query
        /// parameter](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities):
        /// - createdBy
        ///
        /// The following targets are allowed in [filter query
        /// parameters](https://crmdev-teamwork.docs.stoplight.io/documentation/general/filtering):
        /// - isAvatar
        /// - targetId
        /// - targetType
        /// </remarks>
        /// <param name='orderMode'>
        /// Which direction to order the results in. Possible values include:
        /// 'asc', 'desc'
        /// </param>
        /// <param name='orderBy'>
        /// The sorting which the items are returned with, see the endpoints
        /// documentation
        /// for supported values and
        /// [sorting](https://crmdev-teamwork.docs.stoplight.io/documentation/general/sorting)
        /// for more detailed documentation of how this works.
        /// </param>
        /// <param name='include'>
        /// Comma separated list of relationships to include in the response.
        /// See
        /// [including related
        /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
        /// for more detailed documentation of how this works.
        /// </param>
        /// <param name='pageSize'>
        /// Max number of items per page
        /// See
        /// [pagination](https://crmdev-teamwork.docs.stoplight.io/documentation/general/pagination)
        /// for more detailed documentation of how this works.
        /// </param>
        /// <param name='pageOffset'>
        /// Offset items in the page by amount. For example with a pageSize of
        /// 20
        /// setting pageOffset to 20 will return the next page.
        /// See
        /// [pagination](https://crmdev-teamwork.docs.stoplight.io/documentation/general/pagination)
        /// for more detailed documentation of how this works.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<object>> FilesAsync(string orderMode = default(string), string orderBy = default(string), string include = default(string), int? pageSize = 20, int? pageOffset = 0, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
