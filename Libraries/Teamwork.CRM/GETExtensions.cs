// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Teamwork.CRM
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for GET.
    /// </summary>
    public static partial class GETExtensions
    {
            /// <summary>
            /// List all activities.
            /// </summary>
            /// <remarks>
            /// Returns a list of activities, they are returned with the most recently
            /// created
            /// first by default.
            ///
            /// The following values are allowed in the [include query
            /// parameter](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities):
            /// - activityType
            /// - assignees
            ///
            /// The following targets are allowed in [filter query
            /// parameters](https://crmdev-teamwork.docs.stoplight.io/documentation/general/filtering):
            /// - dealId
            /// - isComplete
            /// - typeId
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderMode'>
            /// Which direction to order the results in. Possible values include: 'asc',
            /// 'desc'
            /// </param>
            /// <param name='orderBy'>
            /// The sorting which the items are returned with, see the endpoints
            /// documentation
            /// for supported values and
            /// [sorting](https://crmdev-teamwork.docs.stoplight.io/documentation/general/sorting)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='include'>
            /// Comma separated list of relationships to include in the response.
            /// See
            /// [including related
            /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='pageSize'>
            /// Max number of items per page
            /// See
            /// [pagination](https://crmdev-teamwork.docs.stoplight.io/documentation/general/pagination)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='pageOffset'>
            /// Offset items in the page by amount. For example with a pageSize of 20
            /// setting pageOffset to 20 will return the next page.
            /// See
            /// [pagination](https://crmdev-teamwork.docs.stoplight.io/documentation/general/pagination)
            /// for more detailed documentation of how this works.
            /// </param>
            public static object Activitiesjson(this IGET operations, string orderMode = default(string), string orderBy = default(string), string include = default(string), int? pageSize = 20, int? pageOffset = 0)
            {
                return operations.ActivitiesjsonAsync(orderMode, orderBy, include, pageSize, pageOffset).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all activities.
            /// </summary>
            /// <remarks>
            /// Returns a list of activities, they are returned with the most recently
            /// created
            /// first by default.
            ///
            /// The following values are allowed in the [include query
            /// parameter](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities):
            /// - activityType
            /// - assignees
            ///
            /// The following targets are allowed in [filter query
            /// parameters](https://crmdev-teamwork.docs.stoplight.io/documentation/general/filtering):
            /// - dealId
            /// - isComplete
            /// - typeId
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderMode'>
            /// Which direction to order the results in. Possible values include: 'asc',
            /// 'desc'
            /// </param>
            /// <param name='orderBy'>
            /// The sorting which the items are returned with, see the endpoints
            /// documentation
            /// for supported values and
            /// [sorting](https://crmdev-teamwork.docs.stoplight.io/documentation/general/sorting)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='include'>
            /// Comma separated list of relationships to include in the response.
            /// See
            /// [including related
            /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='pageSize'>
            /// Max number of items per page
            /// See
            /// [pagination](https://crmdev-teamwork.docs.stoplight.io/documentation/general/pagination)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='pageOffset'>
            /// Offset items in the page by amount. For example with a pageSize of 20
            /// setting pageOffset to 20 will return the next page.
            /// See
            /// [pagination](https://crmdev-teamwork.docs.stoplight.io/documentation/general/pagination)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ActivitiesjsonAsync(this IGET operations, string orderMode = default(string), string orderBy = default(string), string include = default(string), int? pageSize = 20, int? pageOffset = 0, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ActivitiesAsync(orderMode, orderBy, include, pageSize, pageOffset, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve an activity
            /// </summary>
            /// <remarks>
            /// The following values are allowed in the [include query
            /// parameter](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities):
            /// - activityType
            /// - assignees
            /// - contacts
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='include'>
            /// Comma separated list of relationships to include in the response.
            /// See
            /// [including related
            /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
            /// for more detailed documentation of how this works.
            /// </param>
            public static object Idjson(this IGET operations, int id, string include = default(string))
            {
                return operations.IdjsonAsync(id, include).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve an activity
            /// </summary>
            /// <remarks>
            /// The following values are allowed in the [include query
            /// parameter](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities):
            /// - activityType
            /// - assignees
            /// - contacts
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='include'>
            /// Comma separated list of relationships to include in the response.
            /// See
            /// [including related
            /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> IdjsonAsync(this IGET operations, int id, string include = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IdAsync(id, include, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all activity types
            /// </summary>
            /// <remarks>
            /// Returns all activity types sorted by order index.
            ///
            /// The following targets are allowed in [filter query
            /// parameters](https://crmdev-teamwork.docs.stoplight.io/documentation/general/filtering):
            /// - isEnabled
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object ActivityTypesjson(this IGET operations)
            {
                return operations.ActivityTypesjsonAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all activity types
            /// </summary>
            /// <remarks>
            /// Returns all activity types sorted by order index.
            ///
            /// The following targets are allowed in [filter query
            /// parameters](https://crmdev-teamwork.docs.stoplight.io/documentation/general/filtering):
            /// - isEnabled
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ActivityTypesjsonAsync(this IGET operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ActivityTypesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve an activity type
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='include'>
            /// Comma separated list of relationships to include in the response.
            /// See
            /// [including related
            /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
            /// for more detailed documentation of how this works.
            /// </param>
            public static object Idjson1(this IGET operations, int id, string include = default(string))
            {
                return operations.Idjson1Async(id, include).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve an activity type
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='include'>
            /// Comma separated list of relationships to include in the response.
            /// See
            /// [including related
            /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> Idjson1Async(this IGET operations, int id, string include = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Idjson1WithHttpMessagesAsync(id, include, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all companies
            /// </summary>
            /// <remarks>
            /// Returns all companies sorted by name.
            ///
            /// The following values are allowed in the [include query
            /// parameter](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities):
            /// - avatar
            /// - contacts
            /// - country
            /// - owner.avatar
            ///
            /// The following targets are allowed in [filter query
            /// parameters](https://crmdev-teamwork.docs.stoplight.io/documentation/general/filtering):
            /// - name
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderMode'>
            /// Which direction to order the results in. Possible values include: 'asc',
            /// 'desc'
            /// </param>
            /// <param name='orderBy'>
            /// The sorting which the items are returned with, see the endpoints
            /// documentation
            /// for supported values and
            /// [sorting](https://crmdev-teamwork.docs.stoplight.io/documentation/general/sorting)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='include'>
            /// Comma separated list of relationships to include in the response.
            /// See
            /// [including related
            /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='pageSize'>
            /// Max number of items per page
            /// See
            /// [pagination](https://crmdev-teamwork.docs.stoplight.io/documentation/general/pagination)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='pageOffset'>
            /// Offset items in the page by amount. For example with a pageSize of 20
            /// setting pageOffset to 20 will return the next page.
            /// See
            /// [pagination](https://crmdev-teamwork.docs.stoplight.io/documentation/general/pagination)
            /// for more detailed documentation of how this works.
            /// </param>
            public static object Companiesjson(this IGET operations, string orderMode = default(string), string orderBy = default(string), string include = default(string), int? pageSize = 20, int? pageOffset = 0)
            {
                return operations.CompaniesjsonAsync(orderMode, orderBy, include, pageSize, pageOffset).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all companies
            /// </summary>
            /// <remarks>
            /// Returns all companies sorted by name.
            ///
            /// The following values are allowed in the [include query
            /// parameter](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities):
            /// - avatar
            /// - contacts
            /// - country
            /// - owner.avatar
            ///
            /// The following targets are allowed in [filter query
            /// parameters](https://crmdev-teamwork.docs.stoplight.io/documentation/general/filtering):
            /// - name
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderMode'>
            /// Which direction to order the results in. Possible values include: 'asc',
            /// 'desc'
            /// </param>
            /// <param name='orderBy'>
            /// The sorting which the items are returned with, see the endpoints
            /// documentation
            /// for supported values and
            /// [sorting](https://crmdev-teamwork.docs.stoplight.io/documentation/general/sorting)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='include'>
            /// Comma separated list of relationships to include in the response.
            /// See
            /// [including related
            /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='pageSize'>
            /// Max number of items per page
            /// See
            /// [pagination](https://crmdev-teamwork.docs.stoplight.io/documentation/general/pagination)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='pageOffset'>
            /// Offset items in the page by amount. For example with a pageSize of 20
            /// setting pageOffset to 20 will return the next page.
            /// See
            /// [pagination](https://crmdev-teamwork.docs.stoplight.io/documentation/general/pagination)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CompaniesjsonAsync(this IGET operations, string orderMode = default(string), string orderBy = default(string), string include = default(string), int? pageSize = 20, int? pageOffset = 0, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CompaniesAsync(orderMode, orderBy, include, pageSize, pageOffset, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve a company
            /// </summary>
            /// <remarks>
            /// The following values are allowed in the [include query
            /// parameter](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities):
            /// - avatar
            /// - contacts.avatar
            /// - contacts.phoneNumbers.code
            /// - contacts
            /// - country
            /// - owner.avatar
            /// - phoneCodes
            /// - phoneNumbers.code
            /// - timezone
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='include'>
            /// Comma separated list of relationships to include in the response.
            /// See
            /// [including related
            /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
            /// for more detailed documentation of how this works.
            /// </param>
            public static object Idjson2(this IGET operations, int id, string include = default(string))
            {
                return operations.Idjson2Async(id, include).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve a company
            /// </summary>
            /// <remarks>
            /// The following values are allowed in the [include query
            /// parameter](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities):
            /// - avatar
            /// - contacts.avatar
            /// - contacts.phoneNumbers.code
            /// - contacts
            /// - country
            /// - owner.avatar
            /// - phoneCodes
            /// - phoneNumbers.code
            /// - timezone
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='include'>
            /// Comma separated list of relationships to include in the response.
            /// See
            /// [including related
            /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> Idjson2Async(this IGET operations, int id, string include = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Idjson2WithHttpMessagesAsync(id, include, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all contacts
            /// </summary>
            /// <remarks>
            /// Returns a list of contacts, they are returned sorted by name by default.
            ///
            /// The following values are allowed in the [include query
            /// parameter](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities):
            /// - avatar
            /// - company.country
            /// - country
            /// - owner.avatar
            ///
            /// The following targets are allowed in [filter query
            /// parameters](https://crmdev-teamwork.docs.stoplight.io/documentation/general/filtering):
            /// - companyExists
            /// - companyId
            /// - dealId
            /// - id
            /// - name
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderMode'>
            /// Which direction to order the results in. Possible values include: 'asc',
            /// 'desc'
            /// </param>
            /// <param name='orderBy'>
            /// The sorting which the items are returned with, see the endpoints
            /// documentation
            /// for supported values and
            /// [sorting](https://crmdev-teamwork.docs.stoplight.io/documentation/general/sorting)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='include'>
            /// Comma separated list of relationships to include in the response.
            /// See
            /// [including related
            /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='pageSize'>
            /// Max number of items per page
            /// See
            /// [pagination](https://crmdev-teamwork.docs.stoplight.io/documentation/general/pagination)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='pageOffset'>
            /// Offset items in the page by amount. For example with a pageSize of 20
            /// setting pageOffset to 20 will return the next page.
            /// See
            /// [pagination](https://crmdev-teamwork.docs.stoplight.io/documentation/general/pagination)
            /// for more detailed documentation of how this works.
            /// </param>
            public static object Contactsjson(this IGET operations, string orderMode = default(string), string orderBy = default(string), string include = default(string), int? pageSize = 20, int? pageOffset = 0)
            {
                return operations.ContactsjsonAsync(orderMode, orderBy, include, pageSize, pageOffset).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all contacts
            /// </summary>
            /// <remarks>
            /// Returns a list of contacts, they are returned sorted by name by default.
            ///
            /// The following values are allowed in the [include query
            /// parameter](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities):
            /// - avatar
            /// - company.country
            /// - country
            /// - owner.avatar
            ///
            /// The following targets are allowed in [filter query
            /// parameters](https://crmdev-teamwork.docs.stoplight.io/documentation/general/filtering):
            /// - companyExists
            /// - companyId
            /// - dealId
            /// - id
            /// - name
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderMode'>
            /// Which direction to order the results in. Possible values include: 'asc',
            /// 'desc'
            /// </param>
            /// <param name='orderBy'>
            /// The sorting which the items are returned with, see the endpoints
            /// documentation
            /// for supported values and
            /// [sorting](https://crmdev-teamwork.docs.stoplight.io/documentation/general/sorting)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='include'>
            /// Comma separated list of relationships to include in the response.
            /// See
            /// [including related
            /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='pageSize'>
            /// Max number of items per page
            /// See
            /// [pagination](https://crmdev-teamwork.docs.stoplight.io/documentation/general/pagination)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='pageOffset'>
            /// Offset items in the page by amount. For example with a pageSize of 20
            /// setting pageOffset to 20 will return the next page.
            /// See
            /// [pagination](https://crmdev-teamwork.docs.stoplight.io/documentation/general/pagination)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ContactsjsonAsync(this IGET operations, string orderMode = default(string), string orderBy = default(string), string include = default(string), int? pageSize = 20, int? pageOffset = 0, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ContactsAsync(orderMode, orderBy, include, pageSize, pageOffset, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve a contact
            /// </summary>
            /// <remarks>
            /// The following values are allowed in the [include query
            /// parameter](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities):
            /// - avatar
            /// - company.avatar
            /// - company.country
            /// - company.phoneNumbers.code
            /// - company.timezone
            /// - country
            /// - owner.avatar
            /// - phoneCodes
            /// - phoneNumbers.code
            /// - timezone
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='include'>
            /// Comma separated list of relationships to include in the response.
            /// See
            /// [including related
            /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
            /// for more detailed documentation of how this works.
            /// </param>
            public static object Idjson3(this IGET operations, int id, string include = default(string))
            {
                return operations.Idjson3Async(id, include).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve a contact
            /// </summary>
            /// <remarks>
            /// The following values are allowed in the [include query
            /// parameter](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities):
            /// - avatar
            /// - company.avatar
            /// - company.country
            /// - company.phoneNumbers.code
            /// - company.timezone
            /// - country
            /// - owner.avatar
            /// - phoneCodes
            /// - phoneNumbers.code
            /// - timezone
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='include'>
            /// Comma separated list of relationships to include in the response.
            /// See
            /// [including related
            /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> Idjson3Async(this IGET operations, int id, string include = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Idjson3WithHttpMessagesAsync(id, include, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all countries
            /// </summary>
            /// <remarks>
            /// Returns all countries sorted by name.
            ///
            /// The following targets are allowed in [filter query
            /// parameters](https://crmdev-teamwork.docs.stoplight.io/documentation/general/filtering):
            /// - name
            /// - code
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object Countriesjson(this IGET operations)
            {
                return operations.CountriesjsonAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all countries
            /// </summary>
            /// <remarks>
            /// Returns all countries sorted by name.
            ///
            /// The following targets are allowed in [filter query
            /// parameters](https://crmdev-teamwork.docs.stoplight.io/documentation/general/filtering):
            /// - name
            /// - code
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CountriesjsonAsync(this IGET operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CountriesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all currencies
            /// </summary>
            /// <remarks>
            /// Returns a list of currencies, they are returned sorted by your
            /// installation's
            /// currency then code by default.
            ///
            /// The following targets are allowed in [filter query
            /// parameters](https://crmdev-teamwork.docs.stoplight.io/documentation/general/filtering):
            /// - code
            /// - name
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderMode'>
            /// Which direction to order the results in. Possible values include: 'asc',
            /// 'desc'
            /// </param>
            /// <param name='orderBy'>
            /// The sorting which the items are returned with, see the endpoints
            /// documentation
            /// for supported values and
            /// [sorting](https://crmdev-teamwork.docs.stoplight.io/documentation/general/sorting)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='include'>
            /// Comma separated list of relationships to include in the response.
            /// See
            /// [including related
            /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='pageSize'>
            /// Max number of items per page
            /// See
            /// [pagination](https://crmdev-teamwork.docs.stoplight.io/documentation/general/pagination)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='pageOffset'>
            /// Offset items in the page by amount. For example with a pageSize of 20
            /// setting pageOffset to 20 will return the next page.
            /// See
            /// [pagination](https://crmdev-teamwork.docs.stoplight.io/documentation/general/pagination)
            /// for more detailed documentation of how this works.
            /// </param>
            public static object Currenciesjson(this IGET operations, string orderMode = default(string), string orderBy = default(string), string include = default(string), int? pageSize = 20, int? pageOffset = 0)
            {
                return operations.CurrenciesjsonAsync(orderMode, orderBy, include, pageSize, pageOffset).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all currencies
            /// </summary>
            /// <remarks>
            /// Returns a list of currencies, they are returned sorted by your
            /// installation's
            /// currency then code by default.
            ///
            /// The following targets are allowed in [filter query
            /// parameters](https://crmdev-teamwork.docs.stoplight.io/documentation/general/filtering):
            /// - code
            /// - name
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderMode'>
            /// Which direction to order the results in. Possible values include: 'asc',
            /// 'desc'
            /// </param>
            /// <param name='orderBy'>
            /// The sorting which the items are returned with, see the endpoints
            /// documentation
            /// for supported values and
            /// [sorting](https://crmdev-teamwork.docs.stoplight.io/documentation/general/sorting)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='include'>
            /// Comma separated list of relationships to include in the response.
            /// See
            /// [including related
            /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='pageSize'>
            /// Max number of items per page
            /// See
            /// [pagination](https://crmdev-teamwork.docs.stoplight.io/documentation/general/pagination)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='pageOffset'>
            /// Offset items in the page by amount. For example with a pageSize of 20
            /// setting pageOffset to 20 will return the next page.
            /// See
            /// [pagination](https://crmdev-teamwork.docs.stoplight.io/documentation/general/pagination)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CurrenciesjsonAsync(this IGET operations, string orderMode = default(string), string orderBy = default(string), string include = default(string), int? pageSize = 20, int? pageOffset = 0, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CurrenciesAsync(orderMode, orderBy, include, pageSize, pageOffset, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve a currency
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='include'>
            /// Comma separated list of relationships to include in the response.
            /// See
            /// [including related
            /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
            /// for more detailed documentation of how this works.
            /// </param>
            public static object Idjson4(this IGET operations, int id, string include = default(string))
            {
                return operations.Idjson4Async(id, include).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve a currency
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='include'>
            /// Comma separated list of relationships to include in the response.
            /// See
            /// [including related
            /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> Idjson4Async(this IGET operations, int id, string include = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Idjson4WithHttpMessagesAsync(id, include, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all custom fields
            /// </summary>
            /// <remarks>
            /// Returns a list with all custom fields.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object CustomFieldsjson(this IGET operations)
            {
                return operations.CustomFieldsjsonAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all custom fields
            /// </summary>
            /// <remarks>
            /// Returns a list with all custom fields.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CustomFieldsjsonAsync(this IGET operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CustomFieldsAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve a custom field
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object Idjson5(this IGET operations, int id)
            {
                return operations.Idjson5Async(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve a custom field
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> Idjson5Async(this IGET operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Idjson5WithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all customfilters
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object CustomFiltersjson(this IGET operations)
            {
                return operations.CustomFiltersjsonAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all customfilters
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CustomFiltersjsonAsync(this IGET operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CustomFiltersAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get customFilter for an id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object Idjson6(this IGET operations, int id)
            {
                return operations.Idjson6Async(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get customFilter for an id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> Idjson6Async(this IGET operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Idjson6WithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all deals
            /// </summary>
            /// <remarks>
            /// Returns a list of deals, they are returned with the most recently created
            /// first by default.
            ///
            /// Make sure you first read how to work with [leads, opportunities, and
            /// deals.](https://crmdev-teamwork.docs.stoplight.io/documentation/miscellaneous/leads-opportunities)
            ///
            /// The following values are allowed in the [include query
            /// parameter](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities):
            /// - company
            /// - company.phoneNumbers.code
            /// - currency
            /// - mainContact
            /// - owner.avatar
            /// - stage.pipeline
            ///
            /// The following targets are allowed in [filter query
            /// parameters](https://crmdev-teamwork.docs.stoplight.io/documentation/general/filtering):
            /// - companyId
            /// - contactEmail
            /// - contactId
            /// - isQualified
            /// - ownerId
            /// - state
            /// - title
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderMode'>
            /// Which direction to order the results in. Possible values include: 'asc',
            /// 'desc'
            /// </param>
            /// <param name='orderBy'>
            /// The sorting which the items are returned with, see the endpoints
            /// documentation
            /// for supported values and
            /// [sorting](https://crmdev-teamwork.docs.stoplight.io/documentation/general/sorting)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='include'>
            /// Comma separated list of relationships to include in the response.
            /// See
            /// [including related
            /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='pageSize'>
            /// Max number of items per page
            /// See
            /// [pagination](https://crmdev-teamwork.docs.stoplight.io/documentation/general/pagination)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='pageOffset'>
            /// Offset items in the page by amount. For example with a pageSize of 20
            /// setting pageOffset to 20 will return the next page.
            /// See
            /// [pagination](https://crmdev-teamwork.docs.stoplight.io/documentation/general/pagination)
            /// for more detailed documentation of how this works.
            /// </param>
            public static object Dealsjson(this IGET operations, string orderMode = default(string), string orderBy = default(string), string include = default(string), int? pageSize = 20, int? pageOffset = 0)
            {
                return operations.DealsjsonAsync(orderMode, orderBy, include, pageSize, pageOffset).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all deals
            /// </summary>
            /// <remarks>
            /// Returns a list of deals, they are returned with the most recently created
            /// first by default.
            ///
            /// Make sure you first read how to work with [leads, opportunities, and
            /// deals.](https://crmdev-teamwork.docs.stoplight.io/documentation/miscellaneous/leads-opportunities)
            ///
            /// The following values are allowed in the [include query
            /// parameter](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities):
            /// - company
            /// - company.phoneNumbers.code
            /// - currency
            /// - mainContact
            /// - owner.avatar
            /// - stage.pipeline
            ///
            /// The following targets are allowed in [filter query
            /// parameters](https://crmdev-teamwork.docs.stoplight.io/documentation/general/filtering):
            /// - companyId
            /// - contactEmail
            /// - contactId
            /// - isQualified
            /// - ownerId
            /// - state
            /// - title
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderMode'>
            /// Which direction to order the results in. Possible values include: 'asc',
            /// 'desc'
            /// </param>
            /// <param name='orderBy'>
            /// The sorting which the items are returned with, see the endpoints
            /// documentation
            /// for supported values and
            /// [sorting](https://crmdev-teamwork.docs.stoplight.io/documentation/general/sorting)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='include'>
            /// Comma separated list of relationships to include in the response.
            /// See
            /// [including related
            /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='pageSize'>
            /// Max number of items per page
            /// See
            /// [pagination](https://crmdev-teamwork.docs.stoplight.io/documentation/general/pagination)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='pageOffset'>
            /// Offset items in the page by amount. For example with a pageSize of 20
            /// setting pageOffset to 20 will return the next page.
            /// See
            /// [pagination](https://crmdev-teamwork.docs.stoplight.io/documentation/general/pagination)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DealsjsonAsync(this IGET operations, string orderMode = default(string), string orderBy = default(string), string include = default(string), int? pageSize = 20, int? pageOffset = 0, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DealsAsync(orderMode, orderBy, include, pageSize, pageOffset, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve a deal
            /// </summary>
            /// <remarks>
            /// Make sure you first read how to work with [leads, opportunities, and
            /// deals.](https://crmdev-teamwork.docs.stoplight.io/documentation/miscellaneous/leads-opportunities)
            ///
            /// The following values are allowed in the [include query
            /// parameter](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities):
            /// - company.avatar
            /// - company.phoneNumbers.code
            /// - company.timezone
            /// - contacts.avatar
            /// - contacts.company
            /// - contacts.phoneNumbers.code
            /// - contacts.timezone
            /// - currency
            /// - lostReason
            /// - mainContact.avatar
            /// - mainContact.timezone
            /// - owner.avatar
            /// - products
            /// - stage.pipeline
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='include'>
            /// Comma separated list of relationships to include in the response.
            /// See
            /// [including related
            /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
            /// for more detailed documentation of how this works.
            /// </param>
            public static object Idjson7(this IGET operations, int id, string include = default(string))
            {
                return operations.Idjson7Async(id, include).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve a deal
            /// </summary>
            /// <remarks>
            /// Make sure you first read how to work with [leads, opportunities, and
            /// deals.](https://crmdev-teamwork.docs.stoplight.io/documentation/miscellaneous/leads-opportunities)
            ///
            /// The following values are allowed in the [include query
            /// parameter](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities):
            /// - company.avatar
            /// - company.phoneNumbers.code
            /// - company.timezone
            /// - contacts.avatar
            /// - contacts.company
            /// - contacts.phoneNumbers.code
            /// - contacts.timezone
            /// - currency
            /// - lostReason
            /// - mainContact.avatar
            /// - mainContact.timezone
            /// - owner.avatar
            /// - products
            /// - stage.pipeline
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='include'>
            /// Comma separated list of relationships to include in the response.
            /// See
            /// [including related
            /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> Idjson7Async(this IGET operations, int id, string include = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Idjson7WithHttpMessagesAsync(id, include, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all exports
            /// </summary>
            /// <remarks>
            /// Returns all exports sorted by createdAt descending.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object Exportsjson(this IGET operations)
            {
                return operations.ExportsjsonAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all exports
            /// </summary>
            /// <remarks>
            /// Returns all exports sorted by createdAt descending.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ExportsjsonAsync(this IGET operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ExportsAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Download a file
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object Download(this IGET operations)
            {
                return operations.DownloadAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Download a file
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DownloadAsync(this IGET operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DownloadWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Redirect to file
            /// </summary>
            /// <remarks>
            /// Returns a temporary redirect (307) to a public URL to the file.
            /// If the file isn't an avatar, it will be accessible only for a period of
            /// time.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object Redirect(this IGET operations)
            {
                return operations.RedirectAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Redirect to file
            /// </summary>
            /// <remarks>
            /// Returns a temporary redirect (307) to a public URL to the file.
            /// If the file isn't an avatar, it will be accessible only for a period of
            /// time.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> RedirectAsync(this IGET operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RedirectWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the health status of the app
            /// </summary>
            /// <remarks>
            /// We will check the health of any required services
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static HealthjsonOKResponse Healthjson(this IGET operations)
            {
                return operations.HealthjsonAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the health status of the app
            /// </summary>
            /// <remarks>
            /// We will check the health of any required services
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HealthjsonOKResponse> HealthjsonAsync(this IGET operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.HealthAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all imports
            /// </summary>
            /// <remarks>
            /// Returns a list of imports, they are returned with the most recently created
            /// first.
            ///
            /// The following values are allowed in the [include query
            /// parameter](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities):
            /// - creator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderMode'>
            /// Which direction to order the results in. Possible values include: 'asc',
            /// 'desc'
            /// </param>
            /// <param name='orderBy'>
            /// The sorting which the items are returned with, see the endpoints
            /// documentation
            /// for supported values and
            /// [sorting](https://crmdev-teamwork.docs.stoplight.io/documentation/general/sorting)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='include'>
            /// Comma separated list of relationships to include in the response.
            /// See
            /// [including related
            /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='pageSize'>
            /// Max number of items per page
            /// See
            /// [pagination](https://crmdev-teamwork.docs.stoplight.io/documentation/general/pagination)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='pageOffset'>
            /// Offset items in the page by amount. For example with a pageSize of 20
            /// setting pageOffset to 20 will return the next page.
            /// See
            /// [pagination](https://crmdev-teamwork.docs.stoplight.io/documentation/general/pagination)
            /// for more detailed documentation of how this works.
            /// </param>
            public static object Importsjson(this IGET operations, string orderMode = default(string), string orderBy = default(string), string include = default(string), int? pageSize = 20, int? pageOffset = 0)
            {
                return operations.ImportsjsonAsync(orderMode, orderBy, include, pageSize, pageOffset).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all imports
            /// </summary>
            /// <remarks>
            /// Returns a list of imports, they are returned with the most recently created
            /// first.
            ///
            /// The following values are allowed in the [include query
            /// parameter](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities):
            /// - creator
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderMode'>
            /// Which direction to order the results in. Possible values include: 'asc',
            /// 'desc'
            /// </param>
            /// <param name='orderBy'>
            /// The sorting which the items are returned with, see the endpoints
            /// documentation
            /// for supported values and
            /// [sorting](https://crmdev-teamwork.docs.stoplight.io/documentation/general/sorting)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='include'>
            /// Comma separated list of relationships to include in the response.
            /// See
            /// [including related
            /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='pageSize'>
            /// Max number of items per page
            /// See
            /// [pagination](https://crmdev-teamwork.docs.stoplight.io/documentation/general/pagination)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='pageOffset'>
            /// Offset items in the page by amount. For example with a pageSize of 20
            /// setting pageOffset to 20 will return the next page.
            /// See
            /// [pagination](https://crmdev-teamwork.docs.stoplight.io/documentation/general/pagination)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ImportsjsonAsync(this IGET operations, string orderMode = default(string), string orderBy = default(string), string include = default(string), int? pageSize = 20, int? pageOffset = 0, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ImportsAsync(orderMode, orderBy, include, pageSize, pageOffset, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all lost-reasons
            /// </summary>
            /// <remarks>
            /// Returns all lost-reasons sorted
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object LostReasonsjson(this IGET operations)
            {
                return operations.LostReasonsjsonAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all lost-reasons
            /// </summary>
            /// <remarks>
            /// Returns all lost-reasons sorted
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> LostReasonsjsonAsync(this IGET operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.LostReasonsAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get lostReason for an id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object Idjson8(this IGET operations, int id)
            {
                return operations.Idjson8Async(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get lostReason for an id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> Idjson8Async(this IGET operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Idjson8WithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all notes
            /// </summary>
            /// <remarks>
            /// Lists all the notes, they are returned with the oldest first by default.
            ///
            /// The following targets are allowed in [filter query
            /// parameters](https://crmdev-teamwork.docs.stoplight.io/documentation/general/filtering):
            /// - subjectId
            /// - subjectType
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderMode'>
            /// Which direction to order the results in. Possible values include: 'asc',
            /// 'desc'
            /// </param>
            /// <param name='orderBy'>
            /// The sorting which the items are returned with, see the endpoints
            /// documentation
            /// for supported values and
            /// [sorting](https://crmdev-teamwork.docs.stoplight.io/documentation/general/sorting)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='include'>
            /// Comma separated list of relationships to include in the response.
            /// See
            /// [including related
            /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='pageSize'>
            /// Max number of items per page
            /// See
            /// [pagination](https://crmdev-teamwork.docs.stoplight.io/documentation/general/pagination)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='pageOffset'>
            /// Offset items in the page by amount. For example with a pageSize of 20
            /// setting pageOffset to 20 will return the next page.
            /// See
            /// [pagination](https://crmdev-teamwork.docs.stoplight.io/documentation/general/pagination)
            /// for more detailed documentation of how this works.
            /// </param>
            public static object Notesjson(this IGET operations, string orderMode = default(string), string orderBy = default(string), string include = default(string), int? pageSize = 20, int? pageOffset = 0)
            {
                return operations.NotesjsonAsync(orderMode, orderBy, include, pageSize, pageOffset).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all notes
            /// </summary>
            /// <remarks>
            /// Lists all the notes, they are returned with the oldest first by default.
            ///
            /// The following targets are allowed in [filter query
            /// parameters](https://crmdev-teamwork.docs.stoplight.io/documentation/general/filtering):
            /// - subjectId
            /// - subjectType
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderMode'>
            /// Which direction to order the results in. Possible values include: 'asc',
            /// 'desc'
            /// </param>
            /// <param name='orderBy'>
            /// The sorting which the items are returned with, see the endpoints
            /// documentation
            /// for supported values and
            /// [sorting](https://crmdev-teamwork.docs.stoplight.io/documentation/general/sorting)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='include'>
            /// Comma separated list of relationships to include in the response.
            /// See
            /// [including related
            /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='pageSize'>
            /// Max number of items per page
            /// See
            /// [pagination](https://crmdev-teamwork.docs.stoplight.io/documentation/general/pagination)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='pageOffset'>
            /// Offset items in the page by amount. For example with a pageSize of 20
            /// setting pageOffset to 20 will return the next page.
            /// See
            /// [pagination](https://crmdev-teamwork.docs.stoplight.io/documentation/general/pagination)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> NotesjsonAsync(this IGET operations, string orderMode = default(string), string orderBy = default(string), string include = default(string), int? pageSize = 20, int? pageOffset = 0, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.NotesAsync(orderMode, orderBy, include, pageSize, pageOffset, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve a note
            /// </summary>
            /// <remarks>
            /// The following values are allowed in the [include query
            /// parameter](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities):
            /// - createdBy
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='include'>
            /// Comma separated list of relationships to include in the response.
            /// See
            /// [including related
            /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
            /// for more detailed documentation of how this works.
            /// </param>
            public static object Idjson9(this IGET operations, int id, string include = default(string))
            {
                return operations.Idjson9Async(id, include).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve a note
            /// </summary>
            /// <remarks>
            /// The following values are allowed in the [include query
            /// parameter](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities):
            /// - createdBy
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='include'>
            /// Comma separated list of relationships to include in the response.
            /// See
            /// [including related
            /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> Idjson9Async(this IGET operations, int id, string include = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Idjson9WithHttpMessagesAsync(id, include, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all phone codes
            /// </summary>
            /// <remarks>
            /// Returns all phone codes sorted by name.
            ///
            /// The following targets are allowed in [filter query
            /// parameters](https://crmdev-teamwork.docs.stoplight.io/documentation/general/filtering):
            /// - code
            /// - name
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object PhoneCodesjson(this IGET operations)
            {
                return operations.PhoneCodesjsonAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all phone codes
            /// </summary>
            /// <remarks>
            /// Returns all phone codes sorted by name.
            ///
            /// The following targets are allowed in [filter query
            /// parameters](https://crmdev-teamwork.docs.stoplight.io/documentation/general/filtering):
            /// - code
            /// - name
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PhoneCodesjsonAsync(this IGET operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PhoneCodesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all pipelines
            /// </summary>
            /// <remarks>
            /// Returns a list of pipelines sorted by orderIndex.
            ///
            /// The following values are allowed in the [include query
            /// parameter](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities):
            /// - stages
            ///
            /// The following targets are allowed in [filter query
            /// parameters](https://crmdev-teamwork.docs.stoplight.io/documentation/general/filtering):
            /// - isQualified
            /// - name
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderMode'>
            /// Which direction to order the results in. Possible values include: 'asc',
            /// 'desc'
            /// </param>
            /// <param name='orderBy'>
            /// The sorting which the items are returned with, see the endpoints
            /// documentation
            /// for supported values and
            /// [sorting](https://crmdev-teamwork.docs.stoplight.io/documentation/general/sorting)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='include'>
            /// Comma separated list of relationships to include in the response.
            /// See
            /// [including related
            /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='pageSize'>
            /// Max number of items per page
            /// See
            /// [pagination](https://crmdev-teamwork.docs.stoplight.io/documentation/general/pagination)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='pageOffset'>
            /// Offset items in the page by amount. For example with a pageSize of 20
            /// setting pageOffset to 20 will return the next page.
            /// See
            /// [pagination](https://crmdev-teamwork.docs.stoplight.io/documentation/general/pagination)
            /// for more detailed documentation of how this works.
            /// </param>
            public static object Pipelinesjson(this IGET operations, string orderMode = default(string), string orderBy = default(string), string include = default(string), int? pageSize = 20, int? pageOffset = 0)
            {
                return operations.PipelinesjsonAsync(orderMode, orderBy, include, pageSize, pageOffset).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all pipelines
            /// </summary>
            /// <remarks>
            /// Returns a list of pipelines sorted by orderIndex.
            ///
            /// The following values are allowed in the [include query
            /// parameter](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities):
            /// - stages
            ///
            /// The following targets are allowed in [filter query
            /// parameters](https://crmdev-teamwork.docs.stoplight.io/documentation/general/filtering):
            /// - isQualified
            /// - name
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderMode'>
            /// Which direction to order the results in. Possible values include: 'asc',
            /// 'desc'
            /// </param>
            /// <param name='orderBy'>
            /// The sorting which the items are returned with, see the endpoints
            /// documentation
            /// for supported values and
            /// [sorting](https://crmdev-teamwork.docs.stoplight.io/documentation/general/sorting)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='include'>
            /// Comma separated list of relationships to include in the response.
            /// See
            /// [including related
            /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='pageSize'>
            /// Max number of items per page
            /// See
            /// [pagination](https://crmdev-teamwork.docs.stoplight.io/documentation/general/pagination)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='pageOffset'>
            /// Offset items in the page by amount. For example with a pageSize of 20
            /// setting pageOffset to 20 will return the next page.
            /// See
            /// [pagination](https://crmdev-teamwork.docs.stoplight.io/documentation/general/pagination)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PipelinesjsonAsync(this IGET operations, string orderMode = default(string), string orderBy = default(string), string include = default(string), int? pageSize = 20, int? pageOffset = 0, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PipelinesAsync(orderMode, orderBy, include, pageSize, pageOffset, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve a pipeline
            /// </summary>
            /// <remarks>
            /// The following values are allowed in the [include query
            /// parameter](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities):
            /// - stages
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='include'>
            /// Comma separated list of relationships to include in the response.
            /// See
            /// [including related
            /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
            /// for more detailed documentation of how this works.
            /// </param>
            public static object Idjson10(this IGET operations, int id, string include = default(string))
            {
                return operations.Idjson10Async(id, include).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve a pipeline
            /// </summary>
            /// <remarks>
            /// The following values are allowed in the [include query
            /// parameter](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities):
            /// - stages
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='include'>
            /// Comma separated list of relationships to include in the response.
            /// See
            /// [including related
            /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> Idjson10Async(this IGET operations, int id, string include = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Idjson10WithHttpMessagesAsync(id, include, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all products
            /// </summary>
            /// <remarks>
            /// Returns a list of products in alphabetical order of their names.
            ///
            /// The following values are allowed in the [include query
            /// parameter](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities):
            /// - owner
            /// - prices
            /// - avatar
            ///
            /// The following targets are allowed in [filter query
            /// parameters](https://crmdev-teamwork.docs.stoplight.io/documentation/general/filtering):
            /// - id
            /// - name
            /// - state
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderMode'>
            /// Which direction to order the results in. Possible values include: 'asc',
            /// 'desc'
            /// </param>
            /// <param name='orderBy'>
            /// The sorting which the items are returned with, see the endpoints
            /// documentation
            /// for supported values and
            /// [sorting](https://crmdev-teamwork.docs.stoplight.io/documentation/general/sorting)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='include'>
            /// Comma separated list of relationships to include in the response.
            /// See
            /// [including related
            /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='pageSize'>
            /// Max number of items per page
            /// See
            /// [pagination](https://crmdev-teamwork.docs.stoplight.io/documentation/general/pagination)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='pageOffset'>
            /// Offset items in the page by amount. For example with a pageSize of 20
            /// setting pageOffset to 20 will return the next page.
            /// See
            /// [pagination](https://crmdev-teamwork.docs.stoplight.io/documentation/general/pagination)
            /// for more detailed documentation of how this works.
            /// </param>
            public static object Productsjson(this IGET operations, string orderMode = default(string), string orderBy = default(string), string include = default(string), int? pageSize = 20, int? pageOffset = 0)
            {
                return operations.ProductsjsonAsync(orderMode, orderBy, include, pageSize, pageOffset).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all products
            /// </summary>
            /// <remarks>
            /// Returns a list of products in alphabetical order of their names.
            ///
            /// The following values are allowed in the [include query
            /// parameter](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities):
            /// - owner
            /// - prices
            /// - avatar
            ///
            /// The following targets are allowed in [filter query
            /// parameters](https://crmdev-teamwork.docs.stoplight.io/documentation/general/filtering):
            /// - id
            /// - name
            /// - state
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderMode'>
            /// Which direction to order the results in. Possible values include: 'asc',
            /// 'desc'
            /// </param>
            /// <param name='orderBy'>
            /// The sorting which the items are returned with, see the endpoints
            /// documentation
            /// for supported values and
            /// [sorting](https://crmdev-teamwork.docs.stoplight.io/documentation/general/sorting)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='include'>
            /// Comma separated list of relationships to include in the response.
            /// See
            /// [including related
            /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='pageSize'>
            /// Max number of items per page
            /// See
            /// [pagination](https://crmdev-teamwork.docs.stoplight.io/documentation/general/pagination)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='pageOffset'>
            /// Offset items in the page by amount. For example with a pageSize of 20
            /// setting pageOffset to 20 will return the next page.
            /// See
            /// [pagination](https://crmdev-teamwork.docs.stoplight.io/documentation/general/pagination)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ProductsjsonAsync(this IGET operations, string orderMode = default(string), string orderBy = default(string), string include = default(string), int? pageSize = 20, int? pageOffset = 0, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ProductsAsync(orderMode, orderBy, include, pageSize, pageOffset, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve a product
            /// </summary>
            /// <remarks>
            /// The following values are allowed in the [include query
            /// parameter](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities):
            /// - owner
            /// - prices
            /// - avatar
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='include'>
            /// Comma separated list of relationships to include in the response.
            /// See
            /// [including related
            /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
            /// for more detailed documentation of how this works.
            /// </param>
            public static object Idjson11(this IGET operations, int id, string include = default(string))
            {
                return operations.Idjson11Async(id, include).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve a product
            /// </summary>
            /// <remarks>
            /// The following values are allowed in the [include query
            /// parameter](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities):
            /// - owner
            /// - prices
            /// - avatar
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='include'>
            /// Comma separated list of relationships to include in the response.
            /// See
            /// [including related
            /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)ActivitiesCompletedjso
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> Idjson11Async(this IGET operations, int id, string include = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Idjson11WithHttpMessagesAsync(id, include, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get activities completed report
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object ActivitiesCompletedjson(this IGET operations)
            {
                return operations.ActivitiesCompletedjsonAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get activities completed report
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ActivitiesCompletedjsonAsync(this IGET operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ActivitiesCompletedAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Export activities completed report in Office Open XML (xlsx) format.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static XlsxNotFoundResponse Xlsx(this IGET operations)
            {
                return operations.XlsxAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Export activities completed report in Office Open XML (xlsx) format.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<XlsxNotFoundResponse> XlsxAsync(this IGET operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.XlsxWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get activities completed over time report
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object OverTimejson(this IGET operations)
            {
                return operations.OverTimejsonAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get activities completed over time report
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> OverTimejsonAsync(this IGET operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.OverTimeAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get activities created report
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object ActivitiesCreatedjson(this IGET operations)
            {
                return operations.ActivitiesCreatedjsonAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get activities created report
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ActivitiesCreatedjsonAsync(this IGET operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ActivitiesCreatedAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Export activities created report in Office Open XML (xlsx) format.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static XlsxNotFoundResponse Xlsx1(this IGET operations)
            {
                return operations.Xlsx1Async().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Export activities created report in Office Open XML (xlsx) format.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<XlsxNotFoundResponse> Xlsx1Async(this IGET operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Xlsx1WithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get activities created over time report
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object OverTimejson1(this IGET operations)
            {
                return operations.OverTimejson1Async().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get activities created over time report
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> OverTimejson1Async(this IGET operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.OverTimejson1WithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get deals created report
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object DealsCreatedjson(this IGET operations)
            {
                return operations.DealsCreatedjsonAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get deals created report
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DealsCreatedjsonAsync(this IGET operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DealsCreatedAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Export deals created report in Office Open XML (xlsx) format.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static XlsxNotFoundResponse Xlsx2(this IGET operations)
            {
                return operations.Xlsx2Async().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Export deals created report in Office Open XML (xlsx) format.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<XlsxNotFoundResponse> Xlsx2Async(this IGET operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Xlsx2WithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get deals created report
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object OverTimejson2(this IGET operations)
            {
                return operations.OverTimejson2Async().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get deals created report
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> OverTimejson2Async(this IGET operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.OverTimejson2WithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get deals lost report
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object DealsLostjson(this IGET operations)
            {
                return operations.DealsLostjsonAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get deals lost report
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DealsLostjsonAsync(this IGET operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DealsLostAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Export deals lost report in Office Open XML (xlsx) format.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static XlsxNotFoundResponse Xlsx3(this IGET operations)
            {
                return operations.Xlsx3Async().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Export deals lost report in Office Open XML (xlsx) format.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<XlsxNotFoundResponse> Xlsx3Async(this IGET operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Xlsx3WithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get leads qualified report
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object LeadsQualifiedjson(this IGET operations)
            {
                return operations.LeadsQualifiedjsonAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get leads qualified report
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> LeadsQualifiedjsonAsync(this IGET operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.LeadsQualifiedAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Export leads qualified report in Office Open XML (xlsx) format.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static XlsxNotFoundResponse Xlsx4(this IGET operations)
            {
                return operations.Xlsx4Async().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Export leads qualified report in Office Open XML (xlsx) format.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<XlsxNotFoundResponse> Xlsx4Async(this IGET operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Xlsx4WithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get leads qualified report
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object OverTimejson3(this IGET operations)
            {
                return operations.OverTimejson3Async().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get leads qualified report
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> OverTimejson3Async(this IGET operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.OverTimejson3WithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get opportunities won report
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object OpportunitiesWonjson(this IGET operations)
            {
                return operations.OpportunitiesWonjsonAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get opportunities won report
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> OpportunitiesWonjsonAsync(this IGET operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.OpportunitiesWonAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Export opportunities won report in Office Open XML (xlsx) format.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static XlsxNotFoundResponse Xlsx5(this IGET operations)
            {
                return operations.Xlsx5Async().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Export opportunities won report in Office Open XML (xlsx) format.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<XlsxNotFoundResponse> Xlsx5Async(this IGET operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Xlsx5WithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get opportunities won overtime report
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object OverTimejson4(this IGET operations)
            {
                return operations.OverTimejson4Async().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get opportunities won overtime report
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> OverTimejson4Async(this IGET operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.OverTimejson4WithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get deals lost report
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object OverTimejson5(this IGET operations)
            {
                return operations.OverTimejson5Async().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get deals lost report
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> OverTimejson5Async(this IGET operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.OverTimejson5WithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Search text in entities
            /// </summary>
            /// <remarks>
            /// Search for a given text in the entities, matching entities are returned by
            /// the most relevant first.
            ///
            /// The following values are allowed in the [include query
            /// parameter](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities):
            /// - company.avatar
            /// - company.phoneNumbers.code
            /// - company.timezone
            /// - contacts.avatar
            /// - contacts.company
            /// - contacts.phoneNumbers.code
            /// - contacts.timezone
            /// - currency
            /// - lostReason
            /// - mainContact.avatar
            /// - mainContact.timezone
            /// - owner.avatar
            /// - products
            /// - stage.pipeline
            ///
            /// The following targets are allowed in [filter query
            /// parameters](https://crmdev-teamwork.docs.stoplight.io/documentation/general/filtering):
            /// - isQualified
            /// - kind
            /// - pipelineId
            ///
            /// In the response, `title` is a string that represents the `content` entity,
            /// as follows:
            ///
            /// | "content" type | Property / properties |
            /// |----------------|-----------------------|
            /// | activities     | title                 |
            /// | companies      | name                  |
            /// | contacts       | firstName + lastName  |
            /// | deals          | title                 |
            /// | files          | name                  |
            /// | notes          | description           |
            /// | pipelines      | name                  |
            /// | products       | name                  |
            /// | users          | firstName + lastName  |
            ///
            /// If the `title` is longer than 255 characters, it’s truncated to 251
            /// characters and “...” is appended.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='t'>
            /// The search term.
            /// </param>
            /// <param name='include'>
            /// Comma separated list of relationships to include in the response.
            /// See
            /// [including related
            /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='pageSize'>
            /// Max number of items per page
            /// See
            /// [pagination](https://crmdev-teamwork.docs.stoplight.io/documentation/general/pagination)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='pageOffset'>
            /// Offset items in the page by amount. For example with a pageSize of 20
            /// setting pageOffset to 20 will return the next page.
            /// See
            /// [pagination](https://crmdev-teamwork.docs.stoplight.io/documentation/general/pagination)
            /// for more detailed documentation of how this works.
            /// </param>
            public static object Searchjson(this IGET operations, string t = default(string), string include = default(string), int? pageSize = 20, int? pageOffset = 0)
            {
                return operations.SearchjsonAsync(t, include, pageSize, pageOffset).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Search text in entities
            /// </summary>
            /// <remarks>
            /// Search for a given text in the entities, matching entities are returned by
            /// the most relevant first.
            ///
            /// The following values are allowed in the [include query
            /// parameter](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities):
            /// - company.avatar
            /// - company.phoneNumbers.code
            /// - company.timezone
            /// - contacts.avatar
            /// - contacts.company
            /// - contacts.phoneNumbers.code
            /// - contacts.timezone
            /// - currency
            /// - lostReason
            /// - mainContact.avatar
            /// - mainContact.timezone
            /// - owner.avatar
            /// - products
            /// - stage.pipeline
            ///
            /// The following targets are allowed in [filter query
            /// parameters](https://crmdev-teamwork.docs.stoplight.io/documentation/general/filtering):
            /// - isQualified
            /// - kind
            /// - pipelineId
            ///
            /// In the response, `title` is a string that represents the `content` entity,
            /// as follows:
            ///
            /// | "content" type | Property / properties |
            /// |----------------|-----------------------|
            /// | activities     | title                 |
            /// | companies      | name                  |
            /// | contacts       | firstName + lastName  |
            /// | deals          | title                 |
            /// | files          | name                  |
            /// | notes          | description           |
            /// | pipelines      | name                  |
            /// | products       | name                  |
            /// | users          | firstName + lastName  |
            ///
            /// If the `title` is longer than 255 characters, it’s truncated to 251
            /// characters and “...” is appended.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='t'>
            /// The search term.
            /// </param>
            /// <param name='include'>
            /// Comma separated list of relationships to include in the response.
            /// See
            /// [including related
            /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='pageSize'>
            /// Max number of items per page
            /// See
            /// [pagination](https://crmdev-teamwork.docs.stoplight.io/documentation/general/pagination)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='pageOffset'>
            /// Offset items in the page by amount. For example with a pageSize of 20
            /// setting pageOffset to 20 will return the next page.
            /// See
            /// [pagination](https://crmdev-teamwork.docs.stoplight.io/documentation/general/pagination)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SearchjsonAsync(this IGET operations, string t = default(string), string include = default(string), int? pageSize = 20, int? pageOffset = 0, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SearchAsync(t, include, pageSize, pageOffset, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the current user session, connections, features etc
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object Mejson(this IGET operations)
            {
                return operations.MejsonAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the current user session, connections, features etc
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> MejsonAsync(this IGET operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.MeAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all stages
            /// </summary>
            /// <remarks>
            /// Returns all stages sorted, they are returned with the lowest `orderIndex`
            /// first.
            ///
            /// The following values are allowed in the [include query
            /// parameter](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities):
            /// - pipeline
            /// - deals
            ///
            /// The following targets are allowed in [filter query
            /// parameters](https://crmdev-teamwork.docs.stoplight.io/documentation/general/filtering):
            /// - name
            /// - pipelineId
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object Stagesjson(this IGET operations)
            {
                return operations.StagesjsonAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all stages
            /// </summary>
            /// <remarks>
            /// Returns all stages sorted, they are returned with the lowest `orderIndex`
            /// first.
            ///
            /// The following values are allowed in the [include query
            /// parameter](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities):
            /// - pipeline
            /// - deals
            ///
            /// The following targets are allowed in [filter query
            /// parameters](https://crmdev-teamwork.docs.stoplight.io/documentation/general/filtering):
            /// - name
            /// - pipelineId
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> StagesjsonAsync(this IGET operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve a stage
            /// </summary>
            /// <remarks>
            /// The following values are allowed in the [include query
            /// parameter](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities):
            /// - pipeline
            /// - deals
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='include'>
            /// Comma separated list of relationships to include in the response.
            /// See
            /// [including related
            /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
            /// for more detailed documentation of how this works.
            /// </param>
            public static object Idjson12(this IGET operations, int id, string include = default(string))
            {
                return operations.Idjson12Async(id, include).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve a stage
            /// </summary>
            /// <remarks>
            /// The following values are allowed in the [include query
            /// parameter](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities):
            /// - pipeline
            /// - deals
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='include'>
            /// Comma separated list of relationships to include in the response.
            /// See
            /// [including related
            /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> Idjson12Async(this IGET operations, int id, string include = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Idjson12WithHttpMessagesAsync(id, include, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the subscription URLs
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static SubscriptionUrlsjsonOKResponse SubscriptionUrlsjson(this IGET operations)
            {
                return operations.SubscriptionUrlsjsonAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the subscription URLs
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SubscriptionUrlsjsonOKResponse> SubscriptionUrlsjsonAsync(this IGET operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SubscriptionUrlsAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all timezones
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static TimezonesjsonNotFoundResponse Timezonesjson(this IGET operations)
            {
                return operations.TimezonesjsonAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all timezones
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TimezonesjsonNotFoundResponse> TimezonesjsonAsync(this IGET operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.TimezonesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all users
            /// </summary>
            /// <remarks>
            /// Returns all users sorted from highest deal to lowest deal
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object Usersjson(this IGET operations)
            {
                return operations.UsersjsonAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all users
            /// </summary>
            /// <remarks>
            /// Returns all users sorted from highest deal to lowest deal
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UsersjsonAsync(this IGET operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UsersAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get current user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object Mejson1(this IGET operations)
            {
                return operations.Mejson1Async().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get current user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> Mejson1Async(this IGET operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Mejson1WithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get user for an id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object Idjson13(this IGET operations, int id)
            {
                return operations.Idjson13Async(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get user for an id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> Idjson13Async(this IGET operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Idjson13WithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all files
            /// </summary>
            /// <remarks>
            /// Returns all files sorted by createdAt.
            ///
            /// The following values are allowed in the [include query
            /// parameter](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities):
            /// - createdBy
            ///
            /// The following targets are allowed in [filter query
            /// parameters](https://crmdev-teamwork.docs.stoplight.io/documentation/general/filtering):
            /// - isAvatar
            /// - targetId
            /// - targetType
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderMode'>
            /// Which direction to order the results in. Possible values include: 'asc',
            /// 'desc'
            /// </param>
            /// <param name='orderBy'>
            /// The sorting which the items are returned with, see the endpoints
            /// documentation
            /// for supported values and
            /// [sorting](https://crmdev-teamwork.docs.stoplight.io/documentation/general/sorting)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='include'>
            /// Comma separated list of relationships to include in the response.
            /// See
            /// [including related
            /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='pageSize'>
            /// Max number of items per page
            /// See
            /// [pagination](https://crmdev-teamwork.docs.stoplight.io/documentation/general/pagination)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='pageOffset'>
            /// Offset items in the page by amount. For example with a pageSize of 20
            /// setting pageOffset to 20 will return the next page.
            /// See
            /// [pagination](https://crmdev-teamwork.docs.stoplight.io/documentation/general/pagination)
            /// for more detailed documentation of how this works.
            /// </param>
            public static object Filesjson(this IGET operations, string orderMode = default(string), string orderBy = default(string), string include = default(string), int? pageSize = 20, int? pageOffset = 0)
            {
                return operations.FilesjsonAsync(orderMode, orderBy, include, pageSize, pageOffset).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all files
            /// </summary>
            /// <remarks>
            /// Returns all files sorted by createdAt.
            ///
            /// The following values are allowed in the [include query
            /// parameter](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities):
            /// - createdBy
            ///
            /// The following targets are allowed in [filter query
            /// parameters](https://crmdev-teamwork.docs.stoplight.io/documentation/general/filtering):
            /// - isAvatar
            /// - targetId
            /// - targetType
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderMode'>
            /// Which direction to order the results in. Possible values include: 'asc',
            /// 'desc'
            /// </param>
            /// <param name='orderBy'>
            /// The sorting which the items are returned with, see the endpoints
            /// documentation
            /// for supported values and
            /// [sorting](https://crmdev-teamwork.docs.stoplight.io/documentation/general/sorting)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='include'>
            /// Comma separated list of relationships to include in the response.
            /// See
            /// [including related
            /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='pageSize'>
            /// Max number of items per page
            /// See
            /// [pagination](https://crmdev-teamwork.docs.stoplight.io/documentation/general/pagination)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='pageOffset'>
            /// Offset items in the page by amount. For example with a pageSize of 20
            /// setting pageOffset to 20 will return the next page.
            /// See
            /// [pagination](https://crmdev-teamwork.docs.stoplight.io/documentation/general/pagination)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> FilesjsonAsync(this IGET operations, string orderMode = default(string), string orderBy = default(string), string include = default(string), int? pageSize = 20, int? pageOffset = 0, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FilesAsync(orderMode, orderBy, include, pageSize, pageOffset, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
