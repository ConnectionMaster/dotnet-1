// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Teamwork.CRM
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// PATCH operations.
    /// </summary>
    public partial interface IPATCH
    {
        /// <summary>
        /// Update an activity.
        /// </summary>
        /// <remarks>
        /// The following values are allowed in the [include query
        /// parameter](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities):
        /// - company.avatar
        /// - company.phoneNumbers.code
        /// - company.timezone
        /// - contacts.avatar
        /// - contacts.company
        /// - contacts.phoneNumbers.code
        /// - contacts.timezone
        /// - currency
        /// - lostReason
        /// - mainContact.avatar
        /// - mainContact.timezone
        /// - owner.avatar
        /// - products
        /// - stage.pipeline
        /// </remarks>
        /// <param name='v1patchActivityRequest'>
        /// </param>
        /// <param name='id'>
        /// </param>
        /// <param name='include'>
        /// Comma separated list of relationships to include in the response.
        /// See
        /// [including related
        /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
        /// for more detailed documentation of how this works.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<object>> IdAsync(V1patchActivityRequest v1patchActivityRequest, int id, string include = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update an activity type
        /// </summary>
        /// <param name='v1patchActivityTypeRequest'>
        /// </param>
        /// <param name='id'>
        /// </param>
        /// <param name='include'>
        /// Comma separated list of relationships to include in the response.
        /// See
        /// [including related
        /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
        /// for more detailed documentation of how this works.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<object>> Idjson1WithHttpMessagesAsync(V1patchActivityTypeRequest v1patchActivityTypeRequest, int id, string include = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update a company
        /// </summary>
        /// <remarks>
        /// The following values are allowed in the [include query
        /// parameter](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities):
        /// - avatar
        /// - contacts.avatar
        /// - contacts.phoneNumbers.code
        /// - contacts
        /// - country
        /// - owner.avatar
        /// - phoneCodes
        /// - phoneNumbers.code
        /// - timezone
        /// </remarks>
        /// <param name='v1patchCompanyRequest'>
        /// </param>
        /// <param name='id'>
        /// </param>
        /// <param name='include'>
        /// Comma separated list of relationships to include in the response.
        /// See
        /// [including related
        /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
        /// for more detailed documentation of how this works.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<object>> Idjson2WithHttpMessagesAsync(V1patchCompanyRequest v1patchCompanyRequest, int id, string include = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update a contact
        /// </summary>
        /// <param name='v1patchContactRequest'>
        /// </param>
        /// <param name='id'>
        /// </param>
        /// <param name='include'>
        /// Comma separated list of relationships to include in the response.
        /// See
        /// [including related
        /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
        /// for more detailed documentation of how this works.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<object>> Idjson3WithHttpMessagesAsync(V1patchContactRequest v1patchContactRequest, int id, string include = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update a custom field
        /// </summary>
        /// <param name='v1patchCustomFieldRequest'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<object>> Idjson4WithHttpMessagesAsync(V1patchCustomFieldRequest v1patchCustomFieldRequest, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update a deal
        /// </summary>
        /// <remarks>
        /// Make sure you first read how to work with [leads, opportunities,
        /// and
        /// deals.](https://crmdev-teamwork.docs.stoplight.io/documentation/miscellaneous/leads-opportunities)
        ///
        /// The following values are allowed in the [include query
        /// parameter](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities):
        /// - company.avatar
        /// - company.phoneNumbers.code
        /// - company.timezone
        /// - contacts.avatar
        /// - contacts.company
        /// - contacts.phoneNumbers.code
        /// - contacts.timezone
        /// - currency
        /// - lostReason
        /// - mainContact.avatar
        /// - mainContact.timezone
        /// - owner.avatar
        /// - products
        /// - stage.pipeline
        /// </remarks>
        /// <param name='v1patchDealRequest'>
        /// </param>
        /// <param name='id'>
        /// </param>
        /// <param name='include'>
        /// Comma separated list of relationships to include in the response.
        /// See
        /// [including related
        /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
        /// for more detailed documentation of how this works.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<object>> Idjson5WithHttpMessagesAsync(V1patchDealRequest v1patchDealRequest, int id, string include = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update installation settings
        /// </summary>
        /// <param name='v1patchInstallationSettingsRequest'>
        /// </param>
        /// <param name='id'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<object>> Idjson6WithHttpMessagesAsync(V1patchInstallationSettingsRequest v1patchInstallationSettingsRequest, int id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Patch a lostReason
        /// </summary>
        /// <param name='v1PatchLostReasonRequest'>
        /// </param>
        /// <param name='id'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<object>> Idjson7WithHttpMessagesAsync(V1PatchLostReasonRequest v1PatchLostReasonRequest, int id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update a note
        /// </summary>
        /// <param name='v1patchNoteRequest'>
        /// </param>
        /// <param name='id'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<object>> Idjson8WithHttpMessagesAsync(V1patchNoteRequest v1patchNoteRequest, int id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update a pipeline
        /// </summary>
        /// <remarks>
        /// The following values are allowed in the [include query
        /// parameter](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities):
        /// - stages
        /// </remarks>
        /// <param name='v1PatchPipelineRequest'>
        /// </param>
        /// <param name='id'>
        /// </param>
        /// <param name='include'>
        /// Comma separated list of relationships to include in the response.
        /// See
        /// [including related
        /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
        /// for more detailed documentation of how this works.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<object>> Idjson9WithHttpMessagesAsync(V1PatchPipelineRequest v1PatchPipelineRequest, int id, string include = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update a product
        /// </summary>
        /// <remarks>
        /// The following values are allowed in the [include query
        /// parameter](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities):
        /// - owner
        /// - prices
        /// - avatar
        /// </remarks>
        /// <param name='v1patchProductRequest'>
        /// </param>
        /// <param name='id'>
        /// </param>
        /// <param name='include'>
        /// Comma separated list of relationships to include in the response.
        /// See
        /// [including related
        /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
        /// for more detailed documentation of how this works.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<object>> Idjson10WithHttpMessagesAsync(V1patchProductRequest v1patchProductRequest, int id, string include = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update a stage
        /// </summary>
        /// <param name='v1patchStageRequest'>
        /// </param>
        /// <param name='id'>
        /// </param>
        /// <param name='include'>
        /// Comma separated list of relationships to include in the response.
        /// See
        /// [including related
        /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
        /// for more detailed documentation of how this works.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<object>> Idjson11WithHttpMessagesAsync(V1patchStageRequest v1patchStageRequest, int id, string include = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update a file
        /// </summary>
        /// <param name='v1patchFileRequest'>
        /// </param>
        /// <param name='id'>
        /// </param>
        /// <param name='include'>
        /// Comma separated list of relationships to include in the response.
        /// See
        /// [including related
        /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
        /// for more detailed documentation of how this works.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<object>> Idjson12WithHttpMessagesAsync(V1patchFileRequest v1patchFileRequest, int id, string include = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Patch a user
        /// </summary>
        /// <param name='v1patchUserRequest'>
        /// </param>
        /// <param name='id'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<object>> Idjson13WithHttpMessagesAsync(V1patchUserRequest v1patchUserRequest, int id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
