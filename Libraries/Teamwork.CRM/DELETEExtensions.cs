// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Teamwork.CRM
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for DELETE.
    /// </summary>
    public static partial class DELETEExtensions
    {
            /// <summary>
            /// Delete an activity
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object Idjson(this IDELETE operations, int id)
            {
                return operations.IdjsonAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete an activity
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> IdjsonAsync(this IDELETE operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IdAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete an activity type
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object Idjson1(this IDELETE operations, int id)
            {
                return operations.Idjson1Async(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete an activity type
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> Idjson1Async(this IDELETE operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Idjson1WithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a company
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object Idjson2(this IDELETE operations, int id)
            {
                return operations.Idjson2Async(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a company
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> Idjson2Async(this IDELETE operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Idjson2WithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a contact
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object Idjson3(this IDELETE operations, int id)
            {
                return operations.Idjson3Async(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a contact
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> Idjson3Async(this IDELETE operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Idjson3WithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a custom field
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object Idjson4(this IDELETE operations)
            {
                return operations.Idjson4Async().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a custom field
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> Idjson4Async(this IDELETE operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Idjson4WithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a customFilter by id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static IdjsonBadRequestResponse Idjson5(this IDELETE operations, int id)
            {
                return operations.Idjson5Async(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a customFilter by id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IdjsonBadRequestResponse> Idjson5Async(this IDELETE operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Idjson5WithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a deal
            /// </summary>
            /// <remarks>
            /// Make sure you first read how to work with [leads, opportunities, and
            /// deals.](https://crmdev-teamwork.docs.stoplight.io/documentation/miscellaneous/leads-opportunities)
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object Idjson6(this IDELETE operations, int id)
            {
                return operations.Idjson6Async(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a deal
            /// </summary>
            /// <remarks>
            /// Make sure you first read how to work with [leads, opportunities, and
            /// deals.](https://crmdev-teamwork.docs.stoplight.io/documentation/miscellaneous/leads-opportunities)
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> Idjson6Async(this IDELETE operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Idjson6WithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a lostReason by id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static IdjsonBadRequestResponse Idjson7(this IDELETE operations, int id)
            {
                return operations.Idjson7Async(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a lostReason by id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IdjsonBadRequestResponse> Idjson7Async(this IDELETE operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Idjson7WithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a note
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object Idjson8(this IDELETE operations, int id)
            {
                return operations.Idjson8Async(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a note
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> Idjson8Async(this IDELETE operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Idjson8WithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a pipeline
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object Idjson9(this IDELETE operations, int id)
            {
                return operations.Idjson9Async(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a pipeline
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> Idjson9Async(this IDELETE operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Idjson9WithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a product
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object Idjson10(this IDELETE operations, int id)
            {
                return operations.Idjson10Async(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a product
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> Idjson10Async(this IDELETE operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Idjson10WithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a stage
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object Idjson11(this IDELETE operations, int id)
            {
                return operations.Idjson11Async(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a stage
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> Idjson11Async(this IDELETE operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Idjson11WithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a file
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object Idjson12(this IDELETE operations, int id)
            {
                return operations.Idjson12Async(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a file
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> Idjson12Async(this IDELETE operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Idjson12WithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
