// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Teamwork.CRM
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for PATCH.
    /// </summary>
    public static partial class PATCHExtensions
    {
            /// <summary>
            /// Update an activity.
            /// </summary>
            /// <remarks>
            /// The following values are allowed in the [include query
            /// parameter](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities):
            /// - company.avatar
            /// - company.phoneNumbers.code
            /// - company.timezone
            /// - contacts.avatar
            /// - contacts.company
            /// - contacts.phoneNumbers.code
            /// - contacts.timezone
            /// - currency
            /// - lostReason
            /// - mainContact.avatar
            /// - mainContact.timezone
            /// - owner.avatar
            /// - products
            /// - stage.pipeline
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='v1patchActivityRequest'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='include'>
            /// Comma separated list of relationships to include in the response.
            /// See
            /// [including related
            /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
            /// for more detailed documentation of how this works.
            /// </param>
            public static object Idjson(this IPATCH operations, V1patchActivityRequest v1patchActivityRequest, int id, string include = default(string))
            {
                return operations.IdjsonAsync(v1patchActivityRequest, id, include).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update an activity.
            /// </summary>
            /// <remarks>
            /// The following values are allowed in the [include query
            /// parameter](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities):
            /// - company.avatar
            /// - company.phoneNumbers.code
            /// - company.timezone
            /// - contacts.avatar
            /// - contacts.company
            /// - contacts.phoneNumbers.code
            /// - contacts.timezone
            /// - currency
            /// - lostReason
            /// - mainContact.avatar
            /// - mainContact.timezone
            /// - owner.avatar
            /// - products
            /// - stage.pipeline
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='v1patchActivityRequest'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='include'>
            /// Comma separated list of relationships to include in the response.
            /// See
            /// [including related
            /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> IdjsonAsync(this IPATCH operations, V1patchActivityRequest v1patchActivityRequest, int id, string include = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IdAsync(v1patchActivityRequest, id, include, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update an activity type
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='v1patchActivityTypeRequest'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='include'>
            /// Comma separated list of relationships to include in the response.
            /// See
            /// [including related
            /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
            /// for more detailed documentation of how this works.
            /// </param>
            public static object Idjson1(this IPATCH operations, V1patchActivityTypeRequest v1patchActivityTypeRequest, int id, string include = default(string))
            {
                return operations.Idjson1Async(v1patchActivityTypeRequest, id, include).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update an activity type
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='v1patchActivityTypeRequest'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='include'>
            /// Comma separated list of relationships to include in the response.
            /// See
            /// [including related
            /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> Idjson1Async(this IPATCH operations, V1patchActivityTypeRequest v1patchActivityTypeRequest, int id, string include = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Idjson1WithHttpMessagesAsync(v1patchActivityTypeRequest, id, include, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a company
            /// </summary>
            /// <remarks>
            /// The following values are allowed in the [include query
            /// parameter](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities):
            /// - avatar
            /// - contacts.avatar
            /// - contacts.phoneNumbers.code
            /// - contacts
            /// - country
            /// - owner.avatar
            /// - phoneCodes
            /// - phoneNumbers.code
            /// - timezone
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='v1patchCompanyRequest'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='include'>
            /// Comma separated list of relationships to include in the response.
            /// See
            /// [including related
            /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
            /// for more detailed documentation of how this works.
            /// </param>
            public static object Idjson2(this IPATCH operations, V1patchCompanyRequest v1patchCompanyRequest, int id, string include = default(string))
            {
                return operations.Idjson2Async(v1patchCompanyRequest, id, include).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a company
            /// </summary>
            /// <remarks>
            /// The following values are allowed in the [include query
            /// parameter](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities):
            /// - avatar
            /// - contacts.avatar
            /// - contacts.phoneNumbers.code
            /// - contacts
            /// - country
            /// - owner.avatar
            /// - phoneCodes
            /// - phoneNumbers.code
            /// - timezone
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='v1patchCompanyRequest'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='include'>
            /// Comma separated list of relationships to include in the response.
            /// See
            /// [including related
            /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> Idjson2Async(this IPATCH operations, V1patchCompanyRequest v1patchCompanyRequest, int id, string include = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Idjson2WithHttpMessagesAsync(v1patchCompanyRequest, id, include, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a contact
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='v1patchContactRequest'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='include'>
            /// Comma separated list of relationships to include in the response.
            /// See
            /// [including related
            /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
            /// for more detailed documentation of how this works.
            /// </param>
            public static object Idjson3(this IPATCH operations, V1patchContactRequest v1patchContactRequest, int id, string include = default(string))
            {
                return operations.Idjson3Async(v1patchContactRequest, id, include).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a contact
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='v1patchContactRequest'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='include'>
            /// Comma separated list of relationships to include in the response.
            /// See
            /// [including related
            /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> Idjson3Async(this IPATCH operations, V1patchContactRequest v1patchContactRequest, int id, string include = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Idjson3WithHttpMessagesAsync(v1patchContactRequest, id, include, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a custom field
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='v1patchCustomFieldRequest'>
            /// </param>
            public static object Idjson4(this IPATCH operations, V1patchCustomFieldRequest v1patchCustomFieldRequest)
            {
                return operations.Idjson4Async(v1patchCustomFieldRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a custom field
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='v1patchCustomFieldRequest'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> Idjson4Async(this IPATCH operations, V1patchCustomFieldRequest v1patchCustomFieldRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Idjson4WithHttpMessagesAsync(v1patchCustomFieldRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a deal
            /// </summary>
            /// <remarks>
            /// Make sure you first read how to work with [leads, opportunities, and
            /// deals.](https://crmdev-teamwork.docs.stoplight.io/documentation/miscellaneous/leads-opportunities)
            ///
            /// The following values are allowed in the [include query
            /// parameter](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities):
            /// - company.avatar
            /// - company.phoneNumbers.code
            /// - company.timezone
            /// - contacts.avatar
            /// - contacts.company
            /// - contacts.phoneNumbers.code
            /// - contacts.timezone
            /// - currency
            /// - lostReason
            /// - mainContact.avatar
            /// - mainContact.timezone
            /// - owner.avatar
            /// - products
            /// - stage.pipeline
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='v1patchDealRequest'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='include'>
            /// Comma separated list of relationships to include in the response.
            /// See
            /// [including related
            /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
            /// for more detailed documentation of how this works.
            /// </param>
            public static object Idjson5(this IPATCH operations, V1patchDealRequest v1patchDealRequest, int id, string include = default(string))
            {
                return operations.Idjson5Async(v1patchDealRequest, id, include).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a deal
            /// </summary>
            /// <remarks>
            /// Make sure you first read how to work with [leads, opportunities, and
            /// deals.](https://crmdev-teamwork.docs.stoplight.io/documentation/miscellaneous/leads-opportunities)
            ///
            /// The following values are allowed in the [include query
            /// parameter](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities):
            /// - company.avatar
            /// - company.phoneNumbers.code
            /// - company.timezone
            /// - contacts.avatar
            /// - contacts.company
            /// - contacts.phoneNumbers.code
            /// - contacts.timezone
            /// - currency
            /// - lostReason
            /// - mainContact.avatar
            /// - mainContact.timezone
            /// - owner.avatar
            /// - products
            /// - stage.pipeline
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='v1patchDealRequest'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='include'>
            /// Comma separated list of relationships to include in the response.
            /// See
            /// [including related
            /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> Idjson5Async(this IPATCH operations, V1patchDealRequest v1patchDealRequest, int id, string include = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Idjson5WithHttpMessagesAsync(v1patchDealRequest, id, include, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update installation settings
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='v1patchInstallationSettingsRequest'>
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object Idjson6(this IPATCH operations, V1patchInstallationSettingsRequest v1patchInstallationSettingsRequest, int id)
            {
                return operations.Idjson6Async(v1patchInstallationSettingsRequest, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update installation settings
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='v1patchInstallationSettingsRequest'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> Idjson6Async(this IPATCH operations, V1patchInstallationSettingsRequest v1patchInstallationSettingsRequest, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Idjson6WithHttpMessagesAsync(v1patchInstallationSettingsRequest, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Patch a lostReason
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='v1PatchLostReasonRequest'>
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object Idjson7(this IPATCH operations, V1PatchLostReasonRequest v1PatchLostReasonRequest, int id)
            {
                return operations.Idjson7Async(v1PatchLostReasonRequest, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Patch a lostReason
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='v1PatchLostReasonRequest'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> Idjson7Async(this IPATCH operations, V1PatchLostReasonRequest v1PatchLostReasonRequest, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Idjson7WithHttpMessagesAsync(v1PatchLostReasonRequest, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a note
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='v1patchNoteRequest'>
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object Idjson8(this IPATCH operations, V1patchNoteRequest v1patchNoteRequest, int id)
            {
                return operations.Idjson8Async(v1patchNoteRequest, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a note
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='v1patchNoteRequest'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> Idjson8Async(this IPATCH operations, V1patchNoteRequest v1patchNoteRequest, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Idjson8WithHttpMessagesAsync(v1patchNoteRequest, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a pipeline
            /// </summary>
            /// <remarks>
            /// The following values are allowed in the [include query
            /// parameter](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities):
            /// - stages
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='v1PatchPipelineRequest'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='include'>
            /// Comma separated list of relationships to include in the response.
            /// See
            /// [including related
            /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
            /// for more detailed documentation of how this works.
            /// </param>
            public static object Idjson9(this IPATCH operations, V1PatchPipelineRequest v1PatchPipelineRequest, int id, string include = default(string))
            {
                return operations.Idjson9Async(v1PatchPipelineRequest, id, include).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a pipeline
            /// </summary>
            /// <remarks>
            /// The following values are allowed in the [include query
            /// parameter](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities):
            /// - stages
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='v1PatchPipelineRequest'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='include'>
            /// Comma separated list of relationships to include in the response.
            /// See
            /// [including related
            /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> Idjson9Async(this IPATCH operations, V1PatchPipelineRequest v1PatchPipelineRequest, int id, string include = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Idjson9WithHttpMessagesAsync(v1PatchPipelineRequest, id, include, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a product
            /// </summary>
            /// <remarks>
            /// The following values are allowed in the [include query
            /// parameter](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities):
            /// - owner
            /// - prices
            /// - avatar
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='v1patchProductRequest'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='include'>
            /// Comma separated list of relationships to include in the response.
            /// See
            /// [including related
            /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
            /// for more detailed documentation of how this works.
            /// </param>
            public static object Idjson10(this IPATCH operations, V1patchProductRequest v1patchProductRequest, int id, string include = default(string))
            {
                return operations.Idjson10Async(v1patchProductRequest, id, include).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a product
            /// </summary>
            /// <remarks>
            /// The following values are allowed in the [include query
            /// parameter](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities):
            /// - owner
            /// - prices
            /// - avatar
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='v1patchProductRequest'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='include'>
            /// Comma separated list of relationships to include in the response.
            /// See
            /// [including related
            /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> Idjson10Async(this IPATCH operations, V1patchProductRequest v1patchProductRequest, int id, string include = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Idjson10WithHttpMessagesAsync(v1patchProductRequest, id, include, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a stage
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='v1patchStageRequest'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='include'>
            /// Comma separated list of relationships to include in the response.
            /// See
            /// [including related
            /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
            /// for more detailed documentation of how this works.
            /// </param>
            public static object Idjson11(this IPATCH operations, V1patchStageRequest v1patchStageRequest, int id, string include = default(string))
            {
                return operations.Idjson11Async(v1patchStageRequest, id, include).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a stage
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='v1patchStageRequest'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='include'>
            /// Comma separated list of relationships to include in the response.
            /// See
            /// [including related
            /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> Idjson11Async(this IPATCH operations, V1patchStageRequest v1patchStageRequest, int id, string include = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Idjson11WithHttpMessagesAsync(v1patchStageRequest, id, include, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a file
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='v1patchFileRequest'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='include'>
            /// Comma separated list of relationships to include in the response.
            /// See
            /// [including related
            /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
            /// for more detailed documentation of how this works.
            /// </param>
            public static object Idjson12(this IPATCH operations, V1patchFileRequest v1patchFileRequest, int id, string include = default(string))
            {
                return operations.Idjson12Async(v1patchFileRequest, id, include).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a file
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='v1patchFileRequest'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='include'>
            /// Comma separated list of relationships to include in the response.
            /// See
            /// [including related
            /// entities](https://crmdev-teamwork.docs.stoplight.io/documentation/general/related-entities)
            /// for more detailed documentation of how this works.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> Idjson12Async(this IPATCH operations, V1patchFileRequest v1patchFileRequest, int id, string include = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Idjson12WithHttpMessagesAsync(v1patchFileRequest, id, include, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Patch a user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='v1patchUserRequest'>
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object Idjson13(this IPATCH operations, V1patchUserRequest v1patchUserRequest, int id)
            {
                return operations.Idjson13Async(v1patchUserRequest, id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Patch a user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='v1patchUserRequest'>
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> Idjson13Async(this IPATCH operations, V1patchUserRequest v1patchUserRequest, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Idjson13WithHttpMessagesAsync(v1patchUserRequest, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
